<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vector.XlApi</name>
    </assembly>
    <members>
        <member name="T:Vector.XlApi.Xl">
            <summary>Main class of Vector.XlApi. Contains all xl-Functions and XL-Constants that are not member of an Enum.</summary>
        </member>
        <member name="F:Vector.XlApi.Xl.EthRxFifoQueueSizeMax">
            <summary>Maximum size of ethernet receive queue: 64 MByte</summary>
        </member>
        <member name="F:Vector.XlApi.Xl.EthRxFifoQueueSizeMin">
            <summary>Minimum size of ethernet receive queue: 64 KByte</summary>
        </member>
        <member name="F:Vector.XlApi.Xl.EthPayloadSizeMax">
            <summary>maximum payload length for sending an ethernet packet</summary>
        </member>
        <member name="F:Vector.XlApi.Xl.EthPayloadSizeMin">
            <summary>minimum payload length for sending an ethernet packet (42 octets with VLAN tag present)</summary>
        </member>
        <member name="F:Vector.XlApi.Xl.EthRawFrameSizeMax">
            <summary>maximum buffer size for storing a "raw" Ethernet frame (including VLAN tags, if present)</summary>
        </member>
        <member name="F:Vector.XlApi.Xl.EthRawFrameSizeMin">
            <summary>minimum buffer size for storing a "raw" Ethernet frame (including VLAN tags, if present)</summary>
        </member>
        <member name="M:Vector.XlApi.Xl.SetApplConfig(Vector.XlApi.XlApplConfig)">
            <summary>Creates a new application in Vector Hardware Config or sets the channel configuration in an exiting application.</summary>
            <param name="applConfig">Application channel assignment to save or overwrite.</param>
            <exception cref="T:Vector.XlApi.XlException">General error, e.g. invalid application name or the given bustype does not support application channel assignments.</exception>
            <seealso cref="M:Vector.XlApi.Xl.TryGetApplConfig(Vector.XlApi.XlApplConfig)"/>
            <seealso cref="M:Vector.XlApi.Xl.GetApplConfig(System.String,System.UInt32,Vector.XlApi.XlBusType)"/>
        </member>
        <member name="M:Vector.XlApi.Xl.TryGetApplConfig(Vector.XlApi.XlApplConfig)">
            <summary>Try to read an existing application channel assignment.
            <para>The caller must set <see cref="P:Vector.XlApi.XlApplConfig.appName"/>, <see cref="P:Vector.XlApi.XlApplConfig.appChannel"/> and <see cref="P:Vector.XlApi.XlApplConfig.busType"/> before calling this function.
            On successful return, the function sets <see cref="P:Vector.XlApi.XlApplConfig.hwType"/>, <see cref="P:Vector.XlApi.XlApplConfig.hwIndex"/> and <see cref="P:Vector.XlApi.XlApplConfig.hwChannel"/>.</para>
            </summary>
            <param name="applConfig">Application channel assignment to read.</param>
            <returns>Status returned by native library. <see cref="F:Vector.XlApi.XlStatus.Error"/> indicates that no such channel assignment exists.</returns>
            <seealso cref="M:Vector.XlApi.Xl.SetApplConfig(Vector.XlApi.XlApplConfig)"/>
            <seealso cref="M:Vector.XlApi.Xl.GetApplConfig(System.String,System.UInt32,Vector.XlApi.XlBusType)"/>
        </member>
        <member name="M:Vector.XlApi.Xl.GetApplConfig(System.String,System.UInt32,Vector.XlApi.XlBusType)">
            <summary>Read an existing application channel assignment.</summary>
            <param name="appName">Name of the application. Must not contain dots.</param>
            <param name="appChannel">Channel of the application. Must be less than <see cref="F:Vector.XlApi.Xl.ApplconfigMaxChannels"/>.</param>
            <param name="busType">Bustype of this assignment.</param>
            <returns>A new XlApplConfig object. The values <paramref name="appName"/>, <paramref name="appChannel"/> and <paramref name="busType"/> are set to the parameters of this function
            and the remaining values are read from the registry.</returns>
            <exception cref="T:Vector.XlApi.XlException">General error, e.g. no such application channel assignment exists.</exception>
            <seealso cref="M:Vector.XlApi.Xl.SetApplConfig(Vector.XlApi.XlApplConfig)"/>
            <seealso cref="M:Vector.XlApi.Xl.TryGetApplConfig(Vector.XlApi.XlApplConfig)"/>
        </member>
        <member name="M:Vector.XlApi.Xl.#ctor">
            <summary>Calls xlOpenDriver() if necessary and returns a stateless Xl-Object.</summary>
        </member>
        <member name="P:Vector.XlApi.Xl.NativeLibraryName">
            <summary>The name of the underlying native Dll, e.g. "vxlapi64.dll".</summary>
        </member>
        <member name="M:Vector.XlApi.Xl.CreateDriverConfig">
            <summary>
            This function allocates a structure that holds information on the hardware configuration.
            
            <para>The application may call this function any time. The returned <see cref="T:Vector.XlApi.XlIdriverConfig"/> structure
            holds the state of the driver configuration at the time of the call. An application may hold multiple
            instances of <see cref="T:Vector.XlApi.XlIdriverConfig"/> at the same time. Once the application does not need an instance
            anymore, it must release the instance with <see cref="M:Vector.XlApi.XlIdriverConfig.Dispose"/>.</para>
            
            <para>In contrast to the native function that lets the application select the version of the driver config,
            the wrapper always requests <see cref="F:Vector.XlApi.XlIdriverConfig.Version"/>. Therefore, this function will fail if
            the native DLL is too old to support the requested version.</para>
            </summary>
            <example>
            The following program prints the list of channels grouped by device:
            <code>
            IReadOnlyList&lt;XlIdeviceDrvConfig&gt; devices;
            using (var driverConfig = xl.CreateDriverConfig()) {
              devices = driverConfig.GetDeviceConfig();
            }
            foreach (var device in devices) {
              Console.WriteLine(device.name);
              foreach (var channel in device.channelList) {
                Console.WriteLine($"- [{channel.channelIndex}] {channel.transceiver.name}");
              }
            }
            </code>
            </example>
            <returns>A structure that holds information on the hardware configuration.</returns>
            <exception cref="T:Vector.XlApi.XlException">General error, e.g. native DLL is too old.</exception>
        </member>
        <member name="M:Vector.XlApi.Xl.NetCloseNetwork(Vector.XlApi.XlNetworkHandle)">
            <summary>Close network and delete the receive network queue.</summary>
            <param name="networkHandle">Handle of network to close.</param>
            <exception cref="T:Vector.XlApi.XlException">General error, e.g. invalid handle.</exception>
            <seealso cref="M:Vector.XlApi.Xl.NetEthOpenNetwork(System.String,System.String,Vector.XlApi.XlAccessType,System.UInt32)" />
        </member>
        <member name="M:Vector.XlApi.Xl.NetOpenVirtualPort(Vector.XlApi.XlNetworkHandle,System.String,Vector.XlApi.XlRxHandle)">
            <summary>Open a pre-defined virtual port on the network.</summary>
            <param name="networkHandle">Handle of network to open the port on.</param>
            <param name="vPortName">Name of the pre-defined virtual port.</param>
            <param name="rxHandle">Application specific handle to identify the different events received.</param>
            <returns>Handle of the opened virtual port.</returns>
            <exception cref="T:Vector.XlApi.XlException">General error, e.g. name of virtual port not found in network or already in use.</exception>
            <seealso cref="M:Vector.XlApi.Xl.NetAddVirtualPort(Vector.XlApi.XlNetworkHandle,System.String,System.String,Vector.XlApi.XlRxHandle)"/>
            <seealso cref="M:Vector.XlApi.Xl.NetConnectMeasurementPoint(Vector.XlApi.XlNetworkHandle,System.String,Vector.XlApi.XlRxHandle)"/>
        </member>
        <member name="M:Vector.XlApi.Xl.NetAddVirtualPort(Vector.XlApi.XlNetworkHandle,System.String,System.String,Vector.XlApi.XlRxHandle)">
            <summary>Adds a temporary virtual port to a switch segment with the given switch name on the network,
            specified by the networkHandle.</summary>
            <remarks>The port name must be unique in the network. The port will not be persisted in the device configuration.
            The port will be added and immediately opened - no further <see cref="M:Vector.XlApi.Xl.NetOpenVirtualPort(Vector.XlApi.XlNetworkHandle,System.String,Vector.XlApi.XlRxHandle)"/>
            function call is necessary. The port is closed automatically with the <see cref="M:Vector.XlApi.Xl.NetDeactivateNetwork(Vector.XlApi.XlNetworkHandle)"/>
            function call.</remarks>
            <param name="networkHandle">Handle of network to open the port on.</param>
            <param name="switchName">Name of the switch segment to add the virtual port on.</param>
            <param name="vPortName">Application assigned name of the virtual port to add. Must be unique in the network.</param>
            <param name="rxHandle">Application specific handle to identify the different events received.</param>
            <returns>Handle of the opened temporary virtual port.</returns>
            <exception cref="T:Vector.XlApi.XlException">General error, e.g. name of switch not found in network.</exception>
            <seealso cref="M:Vector.XlApi.Xl.NetOpenVirtualPort(Vector.XlApi.XlNetworkHandle,System.String,Vector.XlApi.XlRxHandle)"/>
            <seealso cref="M:Vector.XlApi.Xl.NetConnectMeasurementPoint(Vector.XlApi.XlNetworkHandle,System.String,Vector.XlApi.XlRxHandle)"/>
        </member>
        <member name="M:Vector.XlApi.Xl.NetConnectMeasurementPoint(Vector.XlApi.XlNetworkHandle,System.String,Vector.XlApi.XlRxHandle)">
            <summary>Connect the application with a pre-defined measurement point on a network</summary>
            <param name="networkHandle">Handle of network to open the port on.</param>
            <param name="portName">Name of the pre-defined measurement point.</param>
            <param name="rxHandle">Application specific handle to identify the different events received.</param>
            <returns>Handle of the opened measurement point.</returns>
            <exception cref="T:Vector.XlApi.XlException">General error, e.g. name of measurement point not found in network.</exception>
            <seealso cref="M:Vector.XlApi.Xl.NetOpenVirtualPort(Vector.XlApi.XlNetworkHandle,System.String,Vector.XlApi.XlRxHandle)"/>
            <seealso cref="M:Vector.XlApi.Xl.NetAddVirtualPort(Vector.XlApi.XlNetworkHandle,System.String,System.String,Vector.XlApi.XlRxHandle)"/>
        </member>
        <member name="M:Vector.XlApi.Xl.NetActivateNetwork(Vector.XlApi.XlNetworkHandle)">
            <summary>Activate the network and opens the receive network queue</summary>
            <param name="networkHandle">Handle of network to activate.</param>
            <exception cref="T:Vector.XlApi.XlException">General error, e.g. invalid handle.</exception>
            <seealso cref="M:Vector.XlApi.Xl.NetDeactivateNetwork(Vector.XlApi.XlNetworkHandle)"/>
        </member>
        <member name="M:Vector.XlApi.Xl.NetDeactivateNetwork(Vector.XlApi.XlNetworkHandle)">
            <summary> Deactivates the network and closes the receive  network queue. Removes the temporary virtual ports. </summary>
            <param name="networkHandle">Handle of network to deactivate.</param>
            <exception cref="T:Vector.XlApi.XlException">General error, e.g. invalid handle.</exception>
            <seealso cref="M:Vector.XlApi.Xl.NetActivateNetwork(Vector.XlApi.XlNetworkHandle)"/>
        </member>
        <member name="M:Vector.XlApi.Xl.TryNetRequestMACAddress(Vector.XlApi.XlNetworkHandle,Vector.XlApi.XlEthMacAddress@)">
            <summary>Request and lock a globally unique ETH MAC address from pool of application-reservable
            MAC addresses in the network.
            <para>The pool of the network is the union of all the MAC-pools of the devices that are part of the network.
            When the networkHandle is closed - or when the application terminates - the MAC address is implicitly released.
            While a MAC address is locked, no other application can request the address.</para></summary>
            <param name="networkHandle">Handle of the network to query for a MAC address.</param>
            <param name="macAddress">On success: the reserved MAC address, otherwise undefined.</param>
            <returns>Status returned by native library.
            <para><see cref="F:Vector.XlApi.XlStatus.Success"/>: Reservation of MAC succeeded.</para>
            <para><see cref="F:Vector.XlApi.XlStatus.ErrNoResources"/>: The pool of on-demand allocatable  MAC addresses
            of all devices in the network is exhausted.</para>
            <para><see cref="F:Vector.XlApi.XlStatus.ErrNotSupported"/>: No device in the network has a pool of
            demand-allocatable MAC addresses</para>
            </returns>
            <seealso cref="M:Vector.XlApi.Xl.NetRequestMACAddress(Vector.XlApi.XlNetworkHandle)"/>
            <seealso cref="M:Vector.XlApi.Xl.NetReleaseMACAddress(Vector.XlApi.XlNetworkHandle,Vector.XlApi.XlEthMacAddress)"/>
        </member>
        <member name="M:Vector.XlApi.Xl.NetRequestMACAddress(Vector.XlApi.XlNetworkHandle)">
            <summary>Request and lock a globally unique ETH MAC address from pool of application-reservable
            MAC addresses in the network.</summary>
            <remarks>The pool of the network is the union of all the MAC-pools of the devices that are part of the network.
            When the networkHandle is closed - or when the application terminates - the MAC address is implicitly released.
            While a MAC address is locked, no other application can request the address.</remarks>
            <param name="networkHandle">Handle of the network to query for a MAC address.</param>
            <returns>The reserved Mac address.</returns>
            <exception cref="T:Vector.XlApi.XlException">General error, e.g. MAC address pool is exhausted.</exception>
            <seealso cref="M:Vector.XlApi.Xl.TryNetRequestMACAddress(Vector.XlApi.XlNetworkHandle,Vector.XlApi.XlEthMacAddress@)"/>
            <seealso cref="M:Vector.XlApi.Xl.NetReleaseMACAddress(Vector.XlApi.XlNetworkHandle,Vector.XlApi.XlEthMacAddress)"/>
        </member>
        <member name="M:Vector.XlApi.Xl.NetReleaseMACAddress(Vector.XlApi.XlNetworkHandle,Vector.XlApi.XlEthMacAddress)">
            <summary>Release a former requested ETH MAC address from the pool of all application-reservable MAC addresses
            in the network.</summary>
            <param name="networkHandle">Handle of the network that <paramref name="macAddress"/> was allocated from.</param>
            <param name="macAddress">MAC address to return to the pool.</param>
            <exception cref="T:Vector.XlApi.XlException">General error, e.g. MAC address has not been allocated.</exception>
            <seealso cref="M:Vector.XlApi.Xl.TryNetRequestMACAddress(Vector.XlApi.XlNetworkHandle,Vector.XlApi.XlEthMacAddress@)"/>
            <seealso cref="M:Vector.XlApi.Xl.NetRequestMACAddress(Vector.XlApi.XlNetworkHandle)"/>
        </member>
        <member name="M:Vector.XlApi.Xl.NetFlushReceiveQueue(Vector.XlApi.XlNetworkHandle)">
            <summary>Flush the application receive queue of the given network.</summary>
            <param name="networkHandle">Handle of the network.</param>
            <exception cref="T:Vector.XlApi.XlException">General error, e.g. invalid handle.</exception>
        </member>
        <member name="M:Vector.XlApi.Xl.NetSetNotification(Vector.XlApi.XlNetworkHandle,System.Int32)">
            <summary>Set the queue level for notifications on the receive queue of the given network and return a duplicate of
            the native libraries notification handle as an <see cref="T:System.Threading.AutoResetEvent"/>.
            
            <para>The application should call <see cref="M:System.IDisposable.Dispose"/> on the returned event object, after
            <see cref="M:Vector.XlApi.Xl.NetCloseNetwork(Vector.XlApi.XlNetworkHandle)"/>, as the closed network does not signal the event anymore.</para>
            <para>For each event written, the driver signals the event if the resulting receive queue level (in bytes) is larger or
            equal to the queue level set by this function. The application may wait for the event with
            <see cref="M:System.Threading.WaitHandle.WaitOne"/> or <see cref="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])"/>.</para>
            
            <para>Windows events have a signaled and a non-signaled state but are not counting.
            <see cref="M:System.Threading.WaitHandle.WaitOne"/> or <see cref="M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])"/> block the calling thread until the
            Windows event reaches the signaled state and reset the event to the non-signaled state when the thread execution
            continues. Multiple driver events might have been inserted before the Windows event was reset. To ensure that all incoming
            driver events are eventually processed, the thread must consequently call
            <see cref="M:Vector.XlApi.Xl.TryNetEthReceive(Vector.XlApi.XlNetworkHandle,Vector.XlApi.XlNetEthEvent,System.UInt32@,Vector.XlApi.XlRxHandle[])"/> in a loop until it
            returns <see cref="F:Vector.XlApi.XlStatus.ErrQueueIsEmpty"/> before waiting again.</para>
            
            <para>Applications should only call this function once after opening the network.</para>
            </summary>
            <param name="networkHandle">Handle of the network to set the queue level on.</param>
            <param name="queueLevel">Specifies the number of bytes that triggers the event. '1' is the recommended value.</param>
            <returns>Duplicate of the Windows event handle wrapped as a <see cref="T:System.Threading.AutoResetEvent"/>.</returns>
            <exception cref="T:Vector.XlApi.XlException">General error, e.g. invalid network handle.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">Failed to duplicate the handle.</exception>
        </member>
        <member name="M:Vector.XlApi.Xl.NetEthOpenNetwork(System.String,System.String,Vector.XlApi.XlAccessType,System.UInt32)">
            <summary>Opens the network with the specified name and creates a receive network queue.</summary>
            <param name="networkName">Name of the network to be opened. Available names can be retrieved by <see cref="M:Vector.XlApi.Xl.CreateDriverConfig"/>.</param>
            <param name="appName">Optional application name that opens the network.</param>
            <param name="accessType">Defines if the network data will be transmitted reliable or (in future) unreliable for the corresponding uplink.</param>
            <param name="queueSize">Receive queue size in bytes. Value should be between <see cref="F:Vector.XlApi.Xl.EthRxFifoQueueSizeMin"/> and <see cref="F:Vector.XlApi.Xl.EthRxFifoQueueSizeMax"/>.</param>
            <returns>Handle to the opened network.</returns>
            <exception cref="T:Vector.XlApi.XlException">General error, e.g. no network of given name exists.</exception>
            <seealso cref="M:Vector.XlApi.Xl.NetCloseNetwork(Vector.XlApi.XlNetworkHandle)"/>
        </member>
        <member name="M:Vector.XlApi.Xl.TryNetEthSend(Vector.XlApi.XlNetworkHandle,Vector.XlApi.XlEthPortHandle,System.UInt16,Vector.XlApi.XlEthDataframeTx)">
            <summary>Try to transmit an Ethernet frame on the virtual port or measurement point.</summary>
            <param name="networkHandle">Handle to network on which <paramref name="portHandle"/> was opened.</param>
            <param name="portHandle">Handle to the virtual port or measurement point that transmits the frame.</param>
            <param name="userHandle">Application specified value that is returned in the <see cref="P:Vector.XlApi.XlNetEthEvent.userHandle"/> field of <see cref="F:Vector.XlApi.XlEthEventTag.FrametxAckSimulation"/> events. Most applications pass 0.</param>
            <param name="ethTxFrame">The Ethernet frame to be sent.</param>
            <returns>Status retruned by the native library, e.g. <see cref="F:Vector.XlApi.XlStatus.ErrQueueIsFull"/> if the transmit queue is full.</returns>
            <seealso cref="M:Vector.XlApi.Xl.NetEthSend(Vector.XlApi.XlNetworkHandle,Vector.XlApi.XlEthPortHandle,System.UInt16,Vector.XlApi.XlEthDataframeTx)"/>
        </member>
        <member name="M:Vector.XlApi.Xl.NetEthSend(Vector.XlApi.XlNetworkHandle,Vector.XlApi.XlEthPortHandle,System.UInt16,Vector.XlApi.XlEthDataframeTx)">
            <summary>Transmit an Ethernet frame on the virtual port or measurement point.</summary>
            <param name="networkHandle">Handle to network on which <paramref name="portHandle"/> was opened.</param>
            <param name="portHandle">Handle to the virtual port or measurement point that transmits the frame.</param>
            <param name="userHandle">Application specified value that is returned in the <see cref="P:Vector.XlApi.XlNetEthEvent.userHandle"/> field of <see cref="F:Vector.XlApi.XlEthEventTag.FrametxAckSimulation"/> events. Most applications pass 0.</param>
            <param name="ethTxFrame">The Ethernet frame to be sent.</param>
            <exception cref="T:Vector.XlApi.XlException">General error, e.g. transmit queue is full.</exception>
            <seealso cref="M:Vector.XlApi.Xl.TryNetEthSend(Vector.XlApi.XlNetworkHandle,Vector.XlApi.XlEthPortHandle,System.UInt16,Vector.XlApi.XlEthDataframeTx)"/>
        </member>
        <member name="M:Vector.XlApi.Xl.TryNetEthReceive(Vector.XlApi.XlNetworkHandle,Vector.XlApi.XlNetEthEvent,System.UInt32@,Vector.XlApi.XlRxHandle[])">
            <summary>Try to retrieve one event from the receive event queue on a network.
            <para>The event has two components: the event buffer itself and an array of application specified <see cref="T:Vector.XlApi.XlRxHandle"/> values
            that define the set of measurement points or virtual ports that returned event applies to. </para>
            </summary>
            <param name="networkHandle">Handle to the network to read the event from.</param>
            <param name="eventBuffer">Buffer for a single ethernet event.</param>
            <param name="rxHandleCount">Number of valid entries returned in <paramref name="rxHandles"/></param>
            <param name="rxHandles">Buffer to receive the rxHandles of the event. Its array length should at least be as large as the number of MPs and VPs opened on the network.</param>
            <returns>Status code returned by the native library, e.g. <see cref="F:Vector.XlApi.XlStatus.ErrQueueIsEmpty"/> if the receive queue is empty.</returns>
            <exception cref="T:System.ArgumentException">The rxHandles array is <c>null</c> or has length 0.</exception>
            <seealso cref="M:Vector.XlApi.Xl.NetEthReceive(Vector.XlApi.XlNetworkHandle,Vector.XlApi.XlNetEthEvent,System.UInt32@,Vector.XlApi.XlRxHandle[])"/>
        </member>
        <member name="M:Vector.XlApi.Xl.NetEthReceive(Vector.XlApi.XlNetworkHandle,Vector.XlApi.XlNetEthEvent,System.UInt32@,Vector.XlApi.XlRxHandle[])">
            <summary>Retrieves one event from the receive event queue on a network.
            <para>The event has two components: the event buffer itself and an array of application specified <see cref="T:Vector.XlApi.XlRxHandle"/> values
            that define the set of measurement points or virtual ports that returned event applies to. </para>
            </summary>
            <param name="networkHandle">Handle to the network to read the event from.</param>
            <param name="eventBuffer">Buffer for a single ethernet event.</param>
            <param name="rxHandleCount">Number of valid entries returned in <paramref name="rxHandles"/></param>
            <param name="rxHandles">Buffer to receive the rxHandles of the event. Its array length should at least be as large as the number of MPs and VPs opened on the network.</param>
            <exception cref="T:Vector.XlApi.XlException">General error, e.g. receive queue is empty.</exception>
            <exception cref="T:System.ArgumentException">The rxHandles array is <c>null</c> or has length 0.</exception>
            <seealso cref="M:Vector.XlApi.Xl.TryNetEthReceive(Vector.XlApi.XlNetworkHandle,Vector.XlApi.XlNetEthEvent,System.UInt32@,Vector.XlApi.XlRxHandle[])"/>
        </member>
        <member name="M:Vector.XlApi.Xl.NetEthRequestChannelStatus(Vector.XlApi.XlNetworkHandle)">
            <summary>Sends an asynchronous request for a <see cref="T:Vector.XlApi.XlEthChannelStatus"/> event from every open measurement point in the network.</summary>
            <param name="networkHandle">Handle to network to query.</param>
        </member>
        <member name="F:Vector.XlApi.XlStatus.Success">
            <summary>=0x0000</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.Pending">
            <summary>=0x0001</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.Error">
            <summary>=0x00FF</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrQueueIsEmpty">
            <summary>=0x000A</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrQueueIsFull">
            <summary>=0x000B</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrTxNotPossible">
            <summary>=0x000C</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrNoLicense">
            <summary>=0x000E</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrWrongParameter">
            <summary>=0x0065</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrTwiceRegister">
            <summary>=0x006E</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrInvalidChanIndex">
            <summary>=0x006F</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrInvalidAccess">
            <summary>=0x0070</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrPortIsOffline">
            <summary>=0x0071</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrChanIsOnline">
            <summary>=0x0074</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrNotImplemented">
            <summary>=0x0075</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrInvalidPort">
            <summary>=0x0076</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrHwNotReady">
            <summary>=0x0078</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrCmdTimeout">
            <summary>=0x0079</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrCmdHandling">
            <summary>=0x007A</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrHwNotPresent">
            <summary>=0x0081</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrNotifyAlreadyActive">
            <summary>=0x0083</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrInvalidTag">
            <summary>=0x0084</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrInvalidReservedFld">
            <summary>=0x0085</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrInvalidSize">
            <summary>=0x0086</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrInsufficientBuffer">
            <summary>=0x0087</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrErrorCrc">
            <summary>=0x0088</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrBadExeFormat">
            <summary>=0x0089</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrNoSystemResources">
            <summary>=0x008A</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrNotFound">
            <summary>=0x008B</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrInvalidAddress">
            <summary>=0x008C</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrReqNotAccep">
            <summary>=0x008D</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrInvalidLevel">
            <summary>=0x008E</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrNoDataDetected">
            <summary>=0x008F</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrInternalError">
            <summary>=0x0090</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrUnexpNetErr">
            <summary>=0x0091</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrInvalidUserBuffer">
            <summary>=0x0092</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrInvalidPortAccessType">
            <summary>=0x0093</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrNoResources">
            <summary>=0x0098</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrWrongChipType">
            <summary>=0x0099</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrWrongCommand">
            <summary>=0x009A</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrInvalidHandle">
            <summary>=0x009B</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrReservedNotZero">
            <summary>=0x009D</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrInitAccessMissing">
            <summary>=0x009E</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrWrongVersion">
            <summary>=0x00A0</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrCannotOpenDriver">
            <summary>=0x00C9</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrWrongBusType">
            <summary>=0x00CA</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrDllNotFound">
            <summary>=0x00CB</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrInvalidChannelMask">
            <summary>=0x00CC</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrNotSupported">
            <summary>=0x00CD</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrConnectionBroken">
            <summary>=0x00D2</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrConnectionClosed">
            <summary>=0x00D3</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrInvalidStreamName">
            <summary>=0x00D4</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrConnectionFailed">
            <summary>=0x00D5</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrStreamNotFound">
            <summary>=0x00D6</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrStreamNotConnected">
            <summary>=0x00D7</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrQueueOverrun">
            <summary>=0x00D8</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrPduOutOfMemory">
            <summary>Too many PDUs configured or too less system memory free</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrFrClusterconfigMissing">
            <summary>No cluster configuration has been sent to the driver but is needed for the command which failed</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrPduOffsetRepetInvalid">
            <summary>Invalid offset and/or repetition value specified</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrPduPayloadSizeInvalid">
            <summary>Specified PDU payload size is invalid (e.g. size is too large) Frame-API: size is different than static payload length configured in cluster config</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrFrNbrFramesOverflow">
            <summary>Too many frames specified in parameter</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrFrSlotIdInvalid">
            <summary>Specified slot-ID exceeds biggest possible ID specified by the cluster configuration</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrFrSlotAlreadyOccupiedByEray">
            <summary>Specified slot cannot be used by Coldstart-Controller because it's already in use by the eRay</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrFrSlotAlreadyOccupiedByColdc">
            <summary>Specified slot cannot be used by eRay because it's already in use by the Coldstart-Controller</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrFrSlotOccupiedByOtherApp">
            <summary>Specified slot cannot be used because it's already in use by another application</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrFrSlotInWrongSegment">
            <summary>Specified slot is not in correct segment. E.g.: A dynamic slot was specified for startup&amp;sync</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrFrFrameCycleMultiplexError">
            <summary>The given frame-multiplexing rule (specified by offset and repetition) cannot be done because some of the slots are already in use</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrPduNoUnmapOfSyncframe">
            <summary>Unmapping of eRay startup/sync frames is not allowed</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrSyncFrameMode">
            <summary>Wrong txMode in sync frame</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrInvalidDlc">
            <summary>DLC with invalid value</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrInvalidCanid">
            <summary>CAN Id has invalid bits set</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrInvalidFdflagMode20">
            <summary>flag set that must not be set when configured for CAN20 (e.g. EDL)</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrEdlRtr">
            <summary>RTR must not be set in combination with EDL</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrEdlNotSet">
            <summary>EDL is not set but BRS and/or ESICTRL is</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrUnknownFlag">
            <summary>unknown bit in flags field is set</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrEthSetConfigDelayed">
            <summary>Requested config was stored but could not be immediately activated</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrEthUnsupportedFeature">
            <summary>Requested feature/function not supported by device</summary>
        </member>
        <member name="F:Vector.XlApi.XlStatus.ErrNetEthSwitchIsOnline">
            <summary>Switch has already been activated</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.CanSwcProto">
            <summary>Prototype. Driver may latch-up.</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Can1054Opto">
            <summary>1054 with optical isolation</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.CanSwcOpto">
            <summary>SWC with optical isolation</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.CanB10011s">
            <summary>B10011S truck-and-trailer</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Can1050">
            <summary>1050</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Can1050Opto">
            <summary>1050 with optical isolation</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Can1041">
            <summary>1041</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Can1041Opto">
            <summary>1041 with optical isolation</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.CanVirtual">
            <summary>Virtual CAN Trasceiver for Virtual CAN Bus Driver</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Lin6258Opto">
            <summary>Vector LINcab 6258opto with transceiver Infineon TLE6258</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Lin6259Opto">
            <summary>Vector LINcab 6259opto with transceiver Infineon TLE6259</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Daio8444Opto">
            <summary>Vector IOcab 8444  (8 dig.Inp.; 4 dig.Outp.; 4 ana.Inp.; 4 ana.Outp.)</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Can1041aOpto">
            <summary>1041A with optical isolation</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Lin6259Mag">
            <summary>LIN transceiver 6259, with transceiver Infineon TLE6259, magnetically isolated, stress functionality</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Lin7259Mag">
            <summary>LIN transceiver 7259, with transceiver Infineon TLE7259, magnetically isolated, stress functionality</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Lin7269Mag">
            <summary>LIN transceiver 7269, with transceiver Infineon TLE7269, magnetically isolated, stress functionality</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Can1054Mag">
            <summary>TJA1054, magnetically isolated, with selectable termination resistor (via 4th IO line)</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Can251Mag">
            <summary>82C250/251 or equivalent, magnetically isolated</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Can1050Mag">
            <summary>TJA1050, magnetically isolated</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Can1040Mag">
            <summary>TJA1040, magnetically isolated</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Can1041aMag">
            <summary>TJA1041A, magnetically isolated</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.TwinCan1041aMag">
            <summary>TWINcab with two TJA1041, magnetically isolated</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.TwinLin7269Mag">
            <summary>TWINcab with two 7259, Infineon TLE7259, magnetically isolated, stress functionality</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.TwinCan1041av2Mag">
            <summary>TWINcab with two TJA1041, magnetically isolated</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.TwinCan10541041aMag">
            <summary>TWINcab with TJA1054A and TJA1041A with magnetic isolation</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.PbLin6258Opto">
            <summary>LIN piggy back with transceiver Infineon TLE6258</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.PbLin6259Opto">
            <summary>LIN piggy back with transceiver Infineon TLE6259</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.PbLin6259Mag">
            <summary>LIN piggy back with transceiver Infineon TLE6259, magnetically isolated, stress functionality</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.PbCan1041aOpto">
            <summary>CAN transceiver 1041A</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.PbLin7259Mag">
            <summary>LIN piggy back with transceiver Infineon TLE7259, magnetically isolated, stress functionality</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.PbLin7269Mag">
            <summary>LIN piggy back with transceiver Infineon TLE7269, magnetically isolated, stress functionality</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.PbCan251Mag">
            <summary>82C250/251 or compatible, magnetically isolated</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.PbCan1050Mag">
            <summary>TJA 1050, magnetically isolated</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.PbCan1040Mag">
            <summary>TJA 1040, magnetically isolated</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.PbCan1041aMag">
            <summary>TJA 1041A, magnetically isolated</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.PbDaio8444Opto">
            <summary>optically isolated IO piggy</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.PbCan1054Mag">
            <summary>TJA1054, magnetically isolated, with selectable termination resistor (via 4th IO line)</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Can1051CapFix">
            <summary>TJA1051 - fixed transceiver on e.g. 16xx/8970</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Daio1021Fix">
            <summary>Onboard IO of VN1630/VN1640</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Lin7269CapFix">
            <summary>TLE7269 - fixed transceiver on VN1611</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.PbCan1051Cap">
            <summary>TJA 1051, capacitive isolated</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.PbCanSwc7356Cap">
            <summary>Single Wire NCV7356, capacitive isolated</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.PbCan1055Cap">
            <summary>TJA1055, capacitive isolated, with selectable termination resistor (via 4th IO line)</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.PbCan1057Cap">
            <summary>TJA 1057, capacitive isolated</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.A429Holt8596Fix">
            <summary>Onboard HOLT 8596 TX transceiver on VN0601</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.A429Holt8455Fix">
            <summary>Onboard HOLT 8455 RX transceiver on VN0601</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.PbCan1051hgCap">
            <summary>TJA 1051HG, capacitive isolated</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Can1057Fix">
            <summary>TJA 1057 - fixed transceiver on e.g. VN1530, VN4610</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Lin7269Fix">
            <summary>TLE7269 - fixed transceiver on VN1531</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.PbFr1080">
            <summary>TJA 1080</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.PbFr1080Mag">
            <summary>TJA 1080 magnetically isolated piggy</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.PbFr1080aMag">
            <summary>TJA 1080A magnetically isolated piggy</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.PbFr1082Cap">
            <summary>TJA 1082 capacitive isolated piggy</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.PbFrc1082Cap">
            <summary>TJA 1082 capacitive isolated piggy with CANpiggy form factor</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Fr1082CapFix">
            <summary>TJA 1082 capacitive isolated piggy fixed transceiver - e.g. 7610</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Most150Onboard">
            <summary>Onboard MOST150 transceiver of VN2640</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.EthBcm54810Fix">
            <summary>Onboard Broadcom Ethernet PHY on VN5610 and VX0312</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.EthAr8031Fix">
            <summary>Onboard Atheros Ethernet PHY</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.EthBcm89810Fix">
            <summary>Onboard Broadcom Ethernet PHY</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.EthTja1100Fix">
            <summary>Onboard NXP Ethernet PHY</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.EthBcm5481089811Fix">
            <summary>Onboard Broadcom Ethernet PHYs (e.g. VN5610A - BCM54810: RJ45, BCM89811: DSUB)</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.EthDp83xg710q1Fix">
            <summary>Onboard TI 1000BASE-T1 Eth PHY</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.EthBcm54811sFix">
            <summary>Onboard Broadcom Ethernet PHY on VN7640 and VH6501</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.EthRtl9000aaFix">
            <summary>Onboard Realtek Eth PHY</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.EthBcm89811Fix">
            <summary>Onboard Broadcom Ethernet PHY</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.EthBcm54210Fix">
            <summary>Onboard Broadcom BCM54210</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Eth88q2112Fix">
            <summary>Onboard Marvell 88Q2112</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.EthBcm84891Fix">
            <summary>Onboard Broadcom BCM84891</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.PbDaio8642">
            <summary>Iopiggy for VN8900</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.DaioAlOnly">
            <summary>virtual piggy type for activation line only (e.g. VN8810ini)</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Daio1021FixWithAl">
            <summary>On board IO with Activation Line (e.g. VN5640)</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.DaioAlWu">
            <summary>virtual piggy type for activation line and WakeUp Line only (e.g. VN5610A/VN5620)</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.Daio1021FixWith5v">
            <summary>On board IO with 2nd output (e.g. 5V CMOS @ VN4610)</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.EthModBrBcm89810">
            <summary>BroadR-Reach Module with 2x Broadcom BCM89810</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.EthModIeeeRgmiiAr8031">
            <summary>IEEE802.3 RGMII Module with 2x Atheros AR8031</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.EthModIeeeSgmiiAr8031">
            <summary>IEEE802.3 SGMII Module with 2x Atheros AR8031</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.EthModBrTja1100">
            <summary>BroadR-Reach Module with 2x NXP TJA1100</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.EthModBrRtl9000aa">
            <summary>BroadR-Reach Module with 2x Realtek RTL9000-AA</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.EthModBrSgmiiDp83xg710q1">
            <summary>1Gbit (1000BASE-T1) SGMII Module with 2x TI DP83GX710-Q1</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.EthModBr88q2112">
            <summary>BroadR-Reach Module with 2x Marvell 88Q2112</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.EthModBrBcm89811">
            <summary>BroadR-Reach Module with 2x Broadcom BCM89811</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.EthModBrTja1101">
            <summary>100BASE-T1 Module with 2x NXP TJA1101</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.AeModBrBcm89883">
            <summary>100/1000BASE-T1 Module with 4x Broadcom BCM89883</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.PbEth100baset1Tja1101">
            <summary>100BASE-T1 piggy with 6x NXP TJA1101</summary>
        </member>
        <member name="F:Vector.XlApi.XlTransceiverType.PbEth1000baset188q2112">
            <summary>1000BASE-T1 piggy with 6x Marvell 88Q2112</summary>
        </member>
        <member name="F:Vector.XlApi.XlHwType.Canboardxl">
            <summary>CANboardXL, CANboardXL PCIe</summary>
        </member>
        <member name="F:Vector.XlApi.XlHwType.CanboardxlPxi">
            <summary>CANboardXL pxi</summary>
        </member>
        <member name="F:Vector.XlApi.XlBusType.Afdx">
            <summary>former BUS_TYPE_BEAN</summary>
        </member>
        <member name="F:Vector.XlApi.XlBusType.Daio">
            <summary>IO cab/piggy</summary>
        </member>
        <member name="F:Vector.XlApi.XlBusParamsCanopmode.Can20">
            <summary>channel operates in CAN20</summary>
        </member>
        <member name="F:Vector.XlApi.XlBusParamsCanopmode.Canfd">
            <summary>channel operates in CANFD</summary>
        </member>
        <member name="F:Vector.XlApi.XlBusParamsCanopmode.CanfdNoIso">
            <summary>channel operates in CANFD_NO_ISO</summary>
        </member>
        <member name="F:Vector.XlApi.XlOutputMode.Silent">
            <summary>switch CAN trx into default silent mode</summary>
        </member>
        <member name="F:Vector.XlApi.XlOutputMode.Normal">
            <summary>switch CAN trx into normal mode</summary>
        </member>
        <member name="F:Vector.XlApi.XlOutputMode.TxOff">
            <summary>switch CAN trx into silent mode with tx pin off</summary>
        </member>
        <member name="F:Vector.XlApi.XlOutputMode.Sja1000Silent">
            <summary>switch CAN trx into SJA1000 silent mode</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusConnector.Default">
            <summary>Using the only available connector on channel</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusConnector.Rj45">
            <summary>Using RJ-45 connector</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusConnector.Dsub">
            <summary>Using D-Sub connector</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusPhy.PhyUnknown">
            <summary>PHY is currently unknown (e.g. if link is down)</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusPhy.PhyIeee8023">
            <summary>PHY is IEEE 802.3</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusPhy.PhyBroadrReach">
            <summary>PHY is BroadR-Reach</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusPhy.Phy100baseT1">
            <summary>PHY is IEEE  100BASE-T1 (802.3bw) - intentionally same value as BroadR-Reach 100Bit</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusPhy.Phy1000baseT1">
            <summary>PHY is IEEE 1000BASE-T1 (802.3bp)</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusLink.Unknown">
            <summary>The link state could not be determined (e.g. lost connection to board)</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusLink.Down">
            <summary>Link is down (no cable attached, no configuration set, configuration does not match)</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusLink.Up">
            <summary>Link is up</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusLink.Error">
            <summary>Link is in error state (e.g. auto-negotiation failed)</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusSpeed.SpeedUnknown">
            <summary>Connection speed could not be determined (e.g. during auto-negotiation or if link down)</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusSpeed.Speed10">
            <summary>Link speed is 10 Mbps</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusSpeed.Speed100">
            <summary>Link speed is 100 Mbps</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusSpeed.Speed1000">
            <summary>Link speed is 1000 Mbps</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusSpeed.Speed2500">
            <summary>Link speed is 2500 Mbps</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusSpeed.Speed5000">
            <summary>Link speed is 5000 Mbps</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusSpeed.Speed10000">
            <summary>Link speed is 10000 Mbps</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusClock.DontCare">
            <summary>Clock mode not relevant. Only for IEEE 802.3 100/10 MBit</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusClock.Master">
            <summary>Clock mode is master. Only for 1000Base-T or BroadR-Reach</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusClock.Slave">
            <summary>Clock mode is slave. Only for 1000Base-T or BroadR-Reach</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthBypass.Inactive">
            <summary>Bypass inactive (default state)</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthBypass.Phy">
            <summary>Bypass active via PHY loop</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthBypass.Maccore">
            <summary>Bypass active via L2 switch (using MAC cores)</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthChannelCap.Ieee100t1">
            <summary>Channel supports IEEE 802.3pw (100BASE-T1) - Automotive Ethernet over single twisted pair</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthChannelCap.Ieee100tx">
            <summary>Channel supports IEEE 802.3u (100-BASE-TX) and 802.3i (10BASE-T) - Ethernet and Fast Ethernet</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthChannelCap.Ieee1000t">
            <summary>Channel supports IEEE 802.3ab (1000BASE-T) - Gigabit Ethernet</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthChannelCap.Ieee1000t1">
            <summary>Channel supports IEEE 802.3bp (1000BASE-T1) - Automotive Ethernet over single twisted pair</summary>
        </member>
        <member name="F:Vector.XlApi.XlA429MsgParity.Default">
            <summary>get parity config from set channel params</summary>
        </member>
        <member name="F:Vector.XlApi.XlA429MsgParity.Disabled">
            <summary>tx: get parity config from transmit data - rx: check disabled</summary>
        </member>
        <member name="F:Vector.XlApi.XlConnectionInfoFamily.Usb">
            <summary>USB devices</summary>
        </member>
        <member name="F:Vector.XlApi.XlConnectionInfoFamily.Network">
            <summary>Ethernet and WiFi devices</summary>
        </member>
        <member name="F:Vector.XlApi.XlConnectionInfoFamily.Pcie">
            <summary>PCI-Express devices</summary>
        </member>
        <member name="F:Vector.XlApi.XlNetEthSwitchCap.Realswitch">
            <summary>Switch type is "normal" switch (learning is on)</summary>
        </member>
        <member name="F:Vector.XlApi.XlNetEthSwitchCap.Directconn">
            <summary>Switch type is direct connection</summary>
        </member>
        <member name="F:Vector.XlApi.XlNetEthSwitchCap.TapLink">
            <summary>Switch type is TAP</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthFlagsChip.FrameBypassed">
            <summary>For Rx and RxError events</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthFlagsChip.BypassQueueOverflow">
            <summary>MAC bypass queue full condition occurred, one or more packets dropped</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthDataframeFlags.UseSourceMac">
            <summary>Use the given source MAC address (not set by hardware)</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthEventTag.Framerx">
            <summary>Event data type T_XL_ETH_DATAFRAME_RX</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthEventTag.FramerxError">
            <summary>Event data type T_XL_ETH_DATAFRAME_RX_ERROR</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthEventTag.FrametxError">
            <summary>Event data type T_XL_ETH_DATAFRAME_TX_ERROR</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthEventTag.FrametxErrorSwitch">
            <summary>Event data type T_XL_ETH_DATAFRAME_TX_ERR_SW</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthEventTag.FrametxAck">
            <summary>Event data type T_XL_ETH_DATAFRAME_TXACK</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthEventTag.FrametxAckSwitch">
            <summary>Event data type T_XL_ETH_DATAFRAME_TXACK_SW</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthEventTag.FrametxAckOtherApp">
            <summary>Event data type T_XL_ETH_DATAFRAME_TXACK_OTHERAPP</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthEventTag.FrametxErrorOtherApp">
            <summary>Event data type T_XL_ETH_DATAFRAME_TX_ERR_OTHERAPP</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthEventTag.ChannelStatus">
            <summary>Event data type T_XL_ETH_CHANNEL_STATUS</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthEventTag.Configresult">
            <summary>Event data type T_XL_ETH_CONFIG_RESULT</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthEventTag.FramerxSimulation">
            <summary>Event data type T_XL_ETH_DATAFRAME_RX_SIMULATION  (with payload)</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthEventTag.FramerxErrorSimulation">
            <summary>Event data type T_XL_ETH_DATAFRAME_RX_ERROR_SIMULATION (with payload)</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthEventTag.FrametxAckSimulation">
            <summary>Event data type T_XL_ETH_DATAFRAME_TX_SIMULATION (with payload)</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthEventTag.FrametxErrorSimulation">
            <summary>Event data type T_XL_ETH_DATAFRAME_TX_ERROR_SIMULATION (with payload)</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthEventTag.FramerxMeasurement">
            <summary>Event data type T_XL_ETH_DATAFRAME_RX_MEASUREMENT  (with payload)</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthEventTag.FramerxErrorMeasurement">
            <summary>Event data type T_XL_ETH_DATAFRAME_RX_ERROR_MEASUREMENT (with payload)</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthEventTag.FrametxMeasurement">
            <summary>Event data type T_XL_ETH_DATAFRAME_TX_MEASUREMENT (with payload)</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthEventTag.FrametxErrorMeasurement">
            <summary>Event data type T_XL_ETH_DATAFRAME_TX_ERROR_MEASUREMENT (with payload)</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthEventTag.Lostevent">
            <summary>Indication that one or more intended events could not be generated. Event data type T_XL_ETH_LOSTEVENT</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthEventTag.Error">
            <summary>Generic error</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusDuplex.Unknown">
            <summary>Duplex mode could not be determined (e.g. during auto-negotiation or if link down)</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusDuplex.Full">
            <summary>Full duplex mode</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusMdi.Unknown">
            <summary>MDI mode could not be determined  (e.g. during auto-negotiation or if link down)</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusMdi.Straight">
            <summary>Direct MDI</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusMdi.Crossover">
            <summary>Crossover MDI</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusBrPair.BrDontCare">
            <summary>No BR pair available. Only for IEEE 802.3 1000/100/10 MBit</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthStatusBrPair.Br1pair">
            <summary>BR 1-pair connection. Only for BroadR-Reach</summary>
        </member>
        <member name="F:Vector.XlApi.XlAccessType.Unreliable">
            <summary>Only for Ethernet uplink, means UDP transfers. (Not supported yet)</summary>
        </member>
        <member name="F:Vector.XlApi.XlAccessType.Reliable">
            <summary>Always for USB uplink or TCP for Ethernet host uplink</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthNetworkTxError.NoLink">
            <summary>No Link</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthNetworkTxError.PhyNotConfigured">
            <summary>PHY not yet configured</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthNetworkTxError.PhyBridgeEnabled">
            <summary>PHY Bypass activated</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthNetworkTxError.ConverterReset">
            <summary>RGMII Converter in reset</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthNetworkTxError.InvalidLength">
            <summary>Invalid length error. Set when the frame has an invalid length as defined by IEEE802.3</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthNetworkTxError.InvalidCrc">
            <summary>CRC error. Set when frame is transmitted with CRC-32 error but valid length</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthNetworkTxError.MacaddrError">
            <summary>Invalid src or dest MAC address</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthNetworkRxError.InvalidLength">
            <summary>Invalid length error. Set when the receive frame has an invalid length as defined by IEEE802.3</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthNetworkRxError.InvalidCrc">
            <summary>CRC error. Set when frame is received with CRC-32 error but valid length</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthNetworkRxError.PhyError">
            <summary>Corrupted receive frame caused by a PHY error</summary>
        </member>
        <member name="F:Vector.XlApi.XlEthNetworkRxError.MacaddrError">
            <summary>Invalid src or dest MAC address</summary>
        </member>
        <member name="T:Vector.XlApi.XlSyncPulseEv">
             <summary>definition of the sync pulse event for xl interface versions V3 and higher 
            (XL_INTERFACE_VERSION_V3, XL_INTERFACE_VERSION_V4, ..)</summary>
        </member>
        <member name="M:Vector.XlApi.XlSyncPulseEv.#ctor">
            <summary>Zero-initializing constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlSyncPulseEv.#ctor(Vector.XlApi.XlSyncPulseEv)">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlSyncPulseEv.#ctor(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlSyncPulseEv})">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="P:Vector.XlApi.XlSyncPulseEv.NativeSize">
            <summary>Size in bytes of the underlying native structure.</summary>
        </member>
        <member name="P:Vector.XlApi.XlSyncPulseEv.triggerSource">
            <summary>e.g. external or internal trigger source</summary>
        </member>
        <member name="P:Vector.XlApi.XlSyncPulseEv.time">
            <summary>internally generated timestamp</summary>
        </member>
        <member name="M:Vector.XlApi.XlSyncPulseEv.Clone">
            <summary>Returns a deep-copy of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlSyncPulseEv.Clear">
            <summary>Fill this object with zeroes.</summary>
        </member>
        <member name="M:Vector.XlApi.XlSyncPulseEv.CopyFrom(Vector.XlApi.XlSyncPulseEv)">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlSyncPulseEv.CopyFrom(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlSyncPulseEv})">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlSyncPulseEv.CopyTo(Vector.XlApi.XlSyncPulseEv)">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlSyncPulseEv.CopyTo(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlSyncPulseEv})">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlBusParams.#ctor">
            <summary>Zero-initializing constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlBusParams.#ctor(Vector.XlApi.XlBusParams)">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlBusParams.#ctor(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlBusParams})">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="P:Vector.XlApi.XlBusParams.NativeSize">
            <summary>Size in bytes of the underlying native structure.</summary>
        </member>
        <member name="P:Vector.XlApi.XlBusParams.data_can_sam">
            <summary>1 or 3</summary>
        </member>
        <member name="P:Vector.XlApi.XlBusParams.data_canFD_arbitrationBitRate">
            <summary>CAN bus timing for nominal / arbitration bit rate</summary>
        </member>
        <member name="P:Vector.XlApi.XlBusParams.data_canFD_samAbr">
            <summary>1 or 3</summary>
        </member>
        <member name="P:Vector.XlApi.XlBusParams.data_canFD_sjwDbr">
            <summary>CAN bus timing for data bit rate</summary>
        </member>
        <member name="P:Vector.XlApi.XlBusParams.data_flexray_status">
            <summary>XL_FR_CHANNEL_CFG_STATUS_xxx</summary>
        </member>
        <member name="P:Vector.XlApi.XlBusParams.data_flexray_cfgMode">
            <summary>XL_FR_CHANNEL_CFG_MODE_xxx</summary>
        </member>
        <member name="P:Vector.XlApi.XlBusParams.data_flexray_baudrate">
            <summary>FlexRay baudrate in kBaud</summary>
        </member>
        <member name="P:Vector.XlApi.XlBusParams.data_ethernet_macAddr">
            <summary>MAC address (starting with MSB!)</summary>
        </member>
        <member name="P:Vector.XlApi.XlBusParams.data_ethernet_connector">
            <summary>XL_ETH_STATUS_CONNECTOR_xxx</summary>
        </member>
        <member name="P:Vector.XlApi.XlBusParams.data_ethernet_phy">
            <summary>XL_ETH_STATUS_PHY_xxx</summary>
        </member>
        <member name="P:Vector.XlApi.XlBusParams.data_ethernet_link">
            <summary>XL_ETH_STATUS_LINK_xxx</summary>
        </member>
        <member name="P:Vector.XlApi.XlBusParams.data_ethernet_speed">
            <summary>XL_ETH_STATUS_SPEED_xxx</summary>
        </member>
        <member name="P:Vector.XlApi.XlBusParams.data_ethernet_clockMode">
            <summary>XL_ETH_STATUS_CLOCK_xxx</summary>
        </member>
        <member name="P:Vector.XlApi.XlBusParams.data_ethernet_bypass">
            <summary>XL_ETH_BYPASS_xxx</summary>
        </member>
        <member name="M:Vector.XlApi.XlBusParams.Clone">
            <summary>Returns a deep-copy of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlBusParams.Clear">
            <summary>Fill this object with zeroes.</summary>
        </member>
        <member name="M:Vector.XlApi.XlBusParams.CopyFrom(Vector.XlApi.XlBusParams)">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlBusParams.CopyFrom(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlBusParams})">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlBusParams.CopyTo(Vector.XlApi.XlBusParams)">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlBusParams.CopyTo(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlBusParams})">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="T:Vector.XlApi.XlDeviceDrvConfigListV1">
            <summary>device list type</summary>
        </member>
        <member name="M:Vector.XlApi.XlDeviceDrvConfigListV1.#ctor">
            <summary>Zero-initializing constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlDeviceDrvConfigListV1.#ctor(Vector.XlApi.XlDeviceDrvConfigListV1)">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlDeviceDrvConfigListV1.#ctor(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlDeviceDrvConfigListV1})">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="P:Vector.XlApi.XlDeviceDrvConfigListV1.NativeSize">
            <summary>Size in bytes of the underlying native structure.</summary>
        </member>
        <member name="M:Vector.XlApi.XlDeviceDrvConfigListV1.Clone">
            <summary>Returns a deep-copy of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlDeviceDrvConfigListV1.Clear">
            <summary>Fill this object with zeroes.</summary>
        </member>
        <member name="M:Vector.XlApi.XlDeviceDrvConfigListV1.CopyFrom(Vector.XlApi.XlDeviceDrvConfigListV1)">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlDeviceDrvConfigListV1.CopyFrom(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlDeviceDrvConfigListV1})">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlDeviceDrvConfigListV1.CopyTo(Vector.XlApi.XlDeviceDrvConfigListV1)">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlDeviceDrvConfigListV1.CopyTo(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlDeviceDrvConfigListV1})">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="T:Vector.XlApi.XlChannelDrvConfigListV1">
            <summary>channel list type</summary>
        </member>
        <member name="M:Vector.XlApi.XlChannelDrvConfigListV1.#ctor">
            <summary>Zero-initializing constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlChannelDrvConfigListV1.#ctor(Vector.XlApi.XlChannelDrvConfigListV1)">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlChannelDrvConfigListV1.#ctor(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlChannelDrvConfigListV1})">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="P:Vector.XlApi.XlChannelDrvConfigListV1.NativeSize">
            <summary>Size in bytes of the underlying native structure.</summary>
        </member>
        <member name="M:Vector.XlApi.XlChannelDrvConfigListV1.Clone">
            <summary>Returns a deep-copy of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlChannelDrvConfigListV1.Clear">
            <summary>Fill this object with zeroes.</summary>
        </member>
        <member name="M:Vector.XlApi.XlChannelDrvConfigListV1.CopyFrom(Vector.XlApi.XlChannelDrvConfigListV1)">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlChannelDrvConfigListV1.CopyFrom(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlChannelDrvConfigListV1})">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlChannelDrvConfigListV1.CopyTo(Vector.XlApi.XlChannelDrvConfigListV1)">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlChannelDrvConfigListV1.CopyTo(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlChannelDrvConfigListV1})">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="T:Vector.XlApi.XlVirtualPortDrvConfigListV1">
            <summary>virtual port list</summary>
        </member>
        <member name="M:Vector.XlApi.XlVirtualPortDrvConfigListV1.#ctor">
            <summary>Zero-initializing constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlVirtualPortDrvConfigListV1.#ctor(Vector.XlApi.XlVirtualPortDrvConfigListV1)">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlVirtualPortDrvConfigListV1.#ctor(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlVirtualPortDrvConfigListV1})">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="P:Vector.XlApi.XlVirtualPortDrvConfigListV1.NativeSize">
            <summary>Size in bytes of the underlying native structure.</summary>
        </member>
        <member name="M:Vector.XlApi.XlVirtualPortDrvConfigListV1.Clone">
            <summary>Returns a deep-copy of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlVirtualPortDrvConfigListV1.Clear">
            <summary>Fill this object with zeroes.</summary>
        </member>
        <member name="M:Vector.XlApi.XlVirtualPortDrvConfigListV1.CopyFrom(Vector.XlApi.XlVirtualPortDrvConfigListV1)">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlVirtualPortDrvConfigListV1.CopyFrom(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlVirtualPortDrvConfigListV1})">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlVirtualPortDrvConfigListV1.CopyTo(Vector.XlApi.XlVirtualPortDrvConfigListV1)">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlVirtualPortDrvConfigListV1.CopyTo(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlVirtualPortDrvConfigListV1})">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="T:Vector.XlApi.XlMeasurementPointDrvConfigListV1">
            <summary>measurement point config list</summary>
        </member>
        <member name="M:Vector.XlApi.XlMeasurementPointDrvConfigListV1.#ctor">
            <summary>Zero-initializing constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlMeasurementPointDrvConfigListV1.#ctor(Vector.XlApi.XlMeasurementPointDrvConfigListV1)">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlMeasurementPointDrvConfigListV1.#ctor(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlMeasurementPointDrvConfigListV1})">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="P:Vector.XlApi.XlMeasurementPointDrvConfigListV1.NativeSize">
            <summary>Size in bytes of the underlying native structure.</summary>
        </member>
        <member name="M:Vector.XlApi.XlMeasurementPointDrvConfigListV1.Clone">
            <summary>Returns a deep-copy of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlMeasurementPointDrvConfigListV1.Clear">
            <summary>Fill this object with zeroes.</summary>
        </member>
        <member name="M:Vector.XlApi.XlMeasurementPointDrvConfigListV1.CopyFrom(Vector.XlApi.XlMeasurementPointDrvConfigListV1)">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlMeasurementPointDrvConfigListV1.CopyFrom(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlMeasurementPointDrvConfigListV1})">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlMeasurementPointDrvConfigListV1.CopyTo(Vector.XlApi.XlMeasurementPointDrvConfigListV1)">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlMeasurementPointDrvConfigListV1.CopyTo(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlMeasurementPointDrvConfigListV1})">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="T:Vector.XlApi.XlSwitchDrvConfigListV1">
            <summary>switch list type</summary>
        </member>
        <member name="M:Vector.XlApi.XlSwitchDrvConfigListV1.#ctor">
            <summary>Zero-initializing constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlSwitchDrvConfigListV1.#ctor(Vector.XlApi.XlSwitchDrvConfigListV1)">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlSwitchDrvConfigListV1.#ctor(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlSwitchDrvConfigListV1})">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="P:Vector.XlApi.XlSwitchDrvConfigListV1.NativeSize">
            <summary>Size in bytes of the underlying native structure.</summary>
        </member>
        <member name="M:Vector.XlApi.XlSwitchDrvConfigListV1.Clone">
            <summary>Returns a deep-copy of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlSwitchDrvConfigListV1.Clear">
            <summary>Fill this object with zeroes.</summary>
        </member>
        <member name="M:Vector.XlApi.XlSwitchDrvConfigListV1.CopyFrom(Vector.XlApi.XlSwitchDrvConfigListV1)">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlSwitchDrvConfigListV1.CopyFrom(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlSwitchDrvConfigListV1})">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlSwitchDrvConfigListV1.CopyTo(Vector.XlApi.XlSwitchDrvConfigListV1)">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlSwitchDrvConfigListV1.CopyTo(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlSwitchDrvConfigListV1})">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="T:Vector.XlApi.XlNetworkDrvConfigListV1">
            <summary>network list type</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetworkDrvConfigListV1.#ctor">
            <summary>Zero-initializing constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetworkDrvConfigListV1.#ctor(Vector.XlApi.XlNetworkDrvConfigListV1)">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetworkDrvConfigListV1.#ctor(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlNetworkDrvConfigListV1})">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetworkDrvConfigListV1.NativeSize">
            <summary>Size in bytes of the underlying native structure.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetworkDrvConfigListV1.Clone">
            <summary>Returns a deep-copy of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetworkDrvConfigListV1.Clear">
            <summary>Fill this object with zeroes.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetworkDrvConfigListV1.CopyFrom(Vector.XlApi.XlNetworkDrvConfigListV1)">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetworkDrvConfigListV1.CopyFrom(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlNetworkDrvConfigListV1})">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetworkDrvConfigListV1.CopyTo(Vector.XlApi.XlNetworkDrvConfigListV1)">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetworkDrvConfigListV1.CopyTo(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlNetworkDrvConfigListV1})">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="T:Vector.XlApi.XlDllDrvConfigV1">
            <summary>XLAPI DLL configuration V1</summary>
        </member>
        <member name="M:Vector.XlApi.XlDllDrvConfigV1.#ctor">
            <summary>Zero-initializing constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlDllDrvConfigV1.#ctor(Vector.XlApi.XlDllDrvConfigV1)">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlDllDrvConfigV1.#ctor(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlDllDrvConfigV1})">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="P:Vector.XlApi.XlDllDrvConfigV1.NativeSize">
            <summary>Size in bytes of the underlying native structure.</summary>
        </member>
        <member name="P:Vector.XlApi.XlDllDrvConfigV1.dllVersion">
            <summary>version of the loaded DLL instance</summary>
        </member>
        <member name="M:Vector.XlApi.XlDllDrvConfigV1.Clone">
            <summary>Returns a deep-copy of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlDllDrvConfigV1.Clear">
            <summary>Fill this object with zeroes.</summary>
        </member>
        <member name="M:Vector.XlApi.XlDllDrvConfigV1.CopyFrom(Vector.XlApi.XlDllDrvConfigV1)">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlDllDrvConfigV1.CopyFrom(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlDllDrvConfigV1})">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlDllDrvConfigV1.CopyTo(Vector.XlApi.XlDllDrvConfigV1)">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlDllDrvConfigV1.CopyTo(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlDllDrvConfigV1})">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="T:Vector.XlApi.XlDeviceDrvConfigV1">
            <summary>XLAPI device configuration V1</summary>
        </member>
        <member name="M:Vector.XlApi.XlDeviceDrvConfigV1.#ctor">
            <summary>Zero-initializing constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlDeviceDrvConfigV1.#ctor(Vector.XlApi.XlDeviceDrvConfigV1)">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlDeviceDrvConfigV1.#ctor(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlDeviceDrvConfigV1})">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="P:Vector.XlApi.XlDeviceDrvConfigV1.NativeSize">
            <summary>Size in bytes of the underlying native structure.</summary>
        </member>
        <member name="P:Vector.XlApi.XlDeviceDrvConfigV1.name">
            <summary>NULL terminated UTF-8 encoded string</summary>
        </member>
        <member name="P:Vector.XlApi.XlDeviceDrvConfigV1.hwType">
            <summary>HWTYPE_xxxx (see above)</summary>
        </member>
        <member name="P:Vector.XlApi.XlDeviceDrvConfigV1.hwIndex">
            <summary>Index of the hardware (same type) (0,1,...)</summary>
        </member>
        <member name="P:Vector.XlApi.XlDeviceDrvConfigV1.driverVersion">
            <summary>version of the driver</summary>
        </member>
        <member name="P:Vector.XlApi.XlDeviceDrvConfigV1.connectionInfo">
            <summary>XL_CONNECTION_INFO_XXX</summary>
        </member>
        <member name="P:Vector.XlApi.XlDeviceDrvConfigV1.isRemoteDevice">
            <summary>indicates a device of the remote driver config</summary>
        </member>
        <member name="P:Vector.XlApi.XlDeviceDrvConfigV1.channelList">
            <summary>Get a slice for substruct channelList.</summary>
        </member>
        <member name="M:Vector.XlApi.XlDeviceDrvConfigV1.Clone">
            <summary>Returns a deep-copy of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlDeviceDrvConfigV1.Clear">
            <summary>Fill this object with zeroes.</summary>
        </member>
        <member name="M:Vector.XlApi.XlDeviceDrvConfigV1.CopyFrom(Vector.XlApi.XlDeviceDrvConfigV1)">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlDeviceDrvConfigV1.CopyFrom(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlDeviceDrvConfigV1})">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlDeviceDrvConfigV1.CopyTo(Vector.XlApi.XlDeviceDrvConfigV1)">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlDeviceDrvConfigV1.CopyTo(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlDeviceDrvConfigV1})">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="T:Vector.XlApi.XlChannelDrvConfigV1">
            <summary>XLAPI channel configuration V1</summary>
        </member>
        <member name="M:Vector.XlApi.XlChannelDrvConfigV1.#ctor">
            <summary>Zero-initializing constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlChannelDrvConfigV1.#ctor(Vector.XlApi.XlChannelDrvConfigV1)">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlChannelDrvConfigV1.#ctor(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlChannelDrvConfigV1})">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="P:Vector.XlApi.XlChannelDrvConfigV1.NativeSize">
            <summary>Size in bytes of the underlying native structure.</summary>
        </member>
        <member name="P:Vector.XlApi.XlChannelDrvConfigV1.hwChannel">
            <summary>Index of the channel (same hardware) (0,1,...)</summary>
        </member>
        <member name="P:Vector.XlApi.XlChannelDrvConfigV1.channelIndex">
             <summary>Global channel index (0,1,...) in the channel list
            on remote devices this is the index of the local administrated channel</summary>
        </member>
        <member name="P:Vector.XlApi.XlChannelDrvConfigV1.deviceIndex">
            <summary>The index of the device in the device list</summary>
        </member>
        <member name="P:Vector.XlApi.XlChannelDrvConfigV1.interfaceVersion">
            <summary>version of interface with driver</summary>
        </member>
        <member name="P:Vector.XlApi.XlChannelDrvConfigV1.isOnBus">
            <summary>The channel is on bus</summary>
        </member>
        <member name="P:Vector.XlApi.XlChannelDrvConfigV1.channelCapabilities">
            <summary>capabilities which are supported (e.g CHANNEL_FLAG_XXX)</summary>
        </member>
        <member name="P:Vector.XlApi.XlChannelDrvConfigV1.channelBusCapabilities">
            <summary>what buses are supported</summary>
        </member>
        <member name="P:Vector.XlApi.XlChannelDrvConfigV1.channelBusActiveCapabilities">
            <summary>and which are possible to be activated</summary>
        </member>
        <member name="P:Vector.XlApi.XlChannelDrvConfigV1.connectedBusType">
            <summary>currently selected bus</summary>
        </member>
        <member name="P:Vector.XlApi.XlChannelDrvConfigV1.busParams">
            <summary>Get a slice for substruct busParams.</summary>
        </member>
        <member name="P:Vector.XlApi.XlChannelDrvConfigV1.transceiver_name">
            <summary>name of the transceiver, NULL terminated UTF-8 encoded string</summary>
        </member>
        <member name="P:Vector.XlApi.XlChannelDrvConfigV1.transceiver_configError">
            <summary>XL_CHANNEL_CONFIG_ERROR_XXX (see above)</summary>
        </member>
        <member name="P:Vector.XlApi.XlChannelDrvConfigV1.remoteChannel">
            <summary>optional reference to remote channel info</summary>
        </member>
        <member name="M:Vector.XlApi.XlChannelDrvConfigV1.Clone">
            <summary>Returns a deep-copy of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlChannelDrvConfigV1.Clear">
            <summary>Fill this object with zeroes.</summary>
        </member>
        <member name="M:Vector.XlApi.XlChannelDrvConfigV1.CopyFrom(Vector.XlApi.XlChannelDrvConfigV1)">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlChannelDrvConfigV1.CopyFrom(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlChannelDrvConfigV1})">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlChannelDrvConfigV1.CopyTo(Vector.XlApi.XlChannelDrvConfigV1)">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlChannelDrvConfigV1.CopyTo(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlChannelDrvConfigV1})">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="T:Vector.XlApi.XlVirtualPortDrvConfigV1">
            <summary>XLAPI Virtual port configuration V1</summary>
        </member>
        <member name="M:Vector.XlApi.XlVirtualPortDrvConfigV1.#ctor">
            <summary>Zero-initializing constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlVirtualPortDrvConfigV1.#ctor(Vector.XlApi.XlVirtualPortDrvConfigV1)">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlVirtualPortDrvConfigV1.#ctor(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlVirtualPortDrvConfigV1})">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="P:Vector.XlApi.XlVirtualPortDrvConfigV1.NativeSize">
            <summary>Size in bytes of the underlying native structure.</summary>
        </member>
        <member name="P:Vector.XlApi.XlVirtualPortDrvConfigV1.virtualPortName">
            <summary>name of the virtual port, NULL terminated UTF-8 encoded string</summary>
        </member>
        <member name="P:Vector.XlApi.XlVirtualPortDrvConfigV1.networkIdx">
            <summary>the index of the network in the network list this vp belongs to</summary>
        </member>
        <member name="P:Vector.XlApi.XlVirtualPortDrvConfigV1.switchId">
            <summary>ID of the switch in the network - switches in different networks may have the same switch ID</summary>
        </member>
        <member name="M:Vector.XlApi.XlVirtualPortDrvConfigV1.Clone">
            <summary>Returns a deep-copy of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlVirtualPortDrvConfigV1.Clear">
            <summary>Fill this object with zeroes.</summary>
        </member>
        <member name="M:Vector.XlApi.XlVirtualPortDrvConfigV1.CopyFrom(Vector.XlApi.XlVirtualPortDrvConfigV1)">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlVirtualPortDrvConfigV1.CopyFrom(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlVirtualPortDrvConfigV1})">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlVirtualPortDrvConfigV1.CopyTo(Vector.XlApi.XlVirtualPortDrvConfigV1)">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlVirtualPortDrvConfigV1.CopyTo(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlVirtualPortDrvConfigV1})">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="T:Vector.XlApi.XlMeasurementPointDrvConfigV1">
            <summary>XLAPI Measurement point configuration V1</summary>
        </member>
        <member name="M:Vector.XlApi.XlMeasurementPointDrvConfigV1.#ctor">
            <summary>Zero-initializing constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlMeasurementPointDrvConfigV1.#ctor(Vector.XlApi.XlMeasurementPointDrvConfigV1)">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlMeasurementPointDrvConfigV1.#ctor(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlMeasurementPointDrvConfigV1})">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="P:Vector.XlApi.XlMeasurementPointDrvConfigV1.NativeSize">
            <summary>Size in bytes of the underlying native structure.</summary>
        </member>
        <member name="P:Vector.XlApi.XlMeasurementPointDrvConfigV1.measurementPointName">
            <summary>name of the measurement point, NULL terminated UTF-8 encoded string</summary>
        </member>
        <member name="P:Vector.XlApi.XlMeasurementPointDrvConfigV1.networkIdx">
            <summary>the index of the network in the network list this mp belongs to</summary>
        </member>
        <member name="P:Vector.XlApi.XlMeasurementPointDrvConfigV1.switchId">
            <summary>ID of the switch in the network - switches in different networks may have the same switch ID</summary>
        </member>
        <member name="P:Vector.XlApi.XlMeasurementPointDrvConfigV1.channel">
            <summary>the hardware channel the MP is connected to</summary>
        </member>
        <member name="M:Vector.XlApi.XlMeasurementPointDrvConfigV1.Clone">
            <summary>Returns a deep-copy of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlMeasurementPointDrvConfigV1.Clear">
            <summary>Fill this object with zeroes.</summary>
        </member>
        <member name="M:Vector.XlApi.XlMeasurementPointDrvConfigV1.CopyFrom(Vector.XlApi.XlMeasurementPointDrvConfigV1)">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlMeasurementPointDrvConfigV1.CopyFrom(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlMeasurementPointDrvConfigV1})">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlMeasurementPointDrvConfigV1.CopyTo(Vector.XlApi.XlMeasurementPointDrvConfigV1)">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlMeasurementPointDrvConfigV1.CopyTo(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlMeasurementPointDrvConfigV1})">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="T:Vector.XlApi.XlSwitchDrvConfigV1">
            <summary>XLAPI Switch configuration V1</summary>
        </member>
        <member name="M:Vector.XlApi.XlSwitchDrvConfigV1.#ctor">
            <summary>Zero-initializing constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlSwitchDrvConfigV1.#ctor(Vector.XlApi.XlSwitchDrvConfigV1)">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlSwitchDrvConfigV1.#ctor(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlSwitchDrvConfigV1})">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="P:Vector.XlApi.XlSwitchDrvConfigV1.NativeSize">
            <summary>Size in bytes of the underlying native structure.</summary>
        </member>
        <member name="P:Vector.XlApi.XlSwitchDrvConfigV1.switchName">
            <summary>name of the switch, NULL terminated UTF-8 encoded string</summary>
        </member>
        <member name="P:Vector.XlApi.XlSwitchDrvConfigV1.switchId">
            <summary>ID of the switch in the network - switches in different networks may have the same switch ID</summary>
        </member>
        <member name="P:Vector.XlApi.XlSwitchDrvConfigV1.networkIdx">
            <summary>the index of the network in the network list this switch belongs to</summary>
        </member>
        <member name="P:Vector.XlApi.XlSwitchDrvConfigV1.device">
            <summary>the device the switch resides on</summary>
        </member>
        <member name="P:Vector.XlApi.XlSwitchDrvConfigV1.switchCapability">
            <summary>type of the switch "real", TAP or direct connection</summary>
        </member>
        <member name="P:Vector.XlApi.XlSwitchDrvConfigV1.vpList">
            <summary>Get a slice for substruct vpList.</summary>
        </member>
        <member name="P:Vector.XlApi.XlSwitchDrvConfigV1.mpList">
            <summary>Get a slice for substruct mpList.</summary>
        </member>
        <member name="M:Vector.XlApi.XlSwitchDrvConfigV1.Clone">
            <summary>Returns a deep-copy of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlSwitchDrvConfigV1.Clear">
            <summary>Fill this object with zeroes.</summary>
        </member>
        <member name="M:Vector.XlApi.XlSwitchDrvConfigV1.CopyFrom(Vector.XlApi.XlSwitchDrvConfigV1)">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlSwitchDrvConfigV1.CopyFrom(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlSwitchDrvConfigV1})">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlSwitchDrvConfigV1.CopyTo(Vector.XlApi.XlSwitchDrvConfigV1)">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlSwitchDrvConfigV1.CopyTo(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlSwitchDrvConfigV1})">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="T:Vector.XlApi.XlNetworkDrvConfigV1">
            <summary>XLAPI Network configuration V1</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetworkDrvConfigV1.#ctor">
            <summary>Zero-initializing constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetworkDrvConfigV1.#ctor(Vector.XlApi.XlNetworkDrvConfigV1)">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetworkDrvConfigV1.#ctor(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlNetworkDrvConfigV1})">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetworkDrvConfigV1.NativeSize">
            <summary>Size in bytes of the underlying native structure.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetworkDrvConfigV1.networkName">
            <summary>name of the network, NULL terminated UTF-8 encoded string</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetworkDrvConfigV1.statusCode">
            <summary>network configuration error XL_NET_CFG_*</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetworkDrvConfigV1.statusErrorString">
            <summary>NULL terminated UTF-8 encoded string that describes statusCode. NULL if no error string exists.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetworkDrvConfigV1.networkType">
            <summary>XL_ETH_NETWORK</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetworkDrvConfigV1.switchList">
            <summary>Get a slice for substruct switchList.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetworkDrvConfigV1.Clone">
            <summary>Returns a deep-copy of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetworkDrvConfigV1.Clear">
            <summary>Fill this object with zeroes.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetworkDrvConfigV1.CopyFrom(Vector.XlApi.XlNetworkDrvConfigV1)">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetworkDrvConfigV1.CopyFrom(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlNetworkDrvConfigV1})">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetworkDrvConfigV1.CopyTo(Vector.XlApi.XlNetworkDrvConfigV1)">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetworkDrvConfigV1.CopyTo(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlNetworkDrvConfigV1})">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthFrame.#ctor">
            <summary>Zero-initializing constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthFrame.#ctor(Vector.XlApi.XlEthFrame)">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthFrame.#ctor(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlEthFrame})">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthFrame.NativeSize">
            <summary>Size in bytes of the underlying native structure.</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthFrame.etherType">
            <summary>Ethernet type in network byte order</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthFrame.Clone">
            <summary>Returns a deep-copy of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthFrame.Clear">
            <summary>Fill this object with zeroes.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthFrame.CopyFrom(Vector.XlApi.XlEthFrame)">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthFrame.CopyFrom(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlEthFrame})">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthFrame.CopyTo(Vector.XlApi.XlEthFrame)">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthFrame.CopyTo(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlEthFrame})">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthFramedata.#ctor">
            <summary>Zero-initializing constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthFramedata.#ctor(Vector.XlApi.XlEthFramedata)">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthFramedata.#ctor(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlEthFramedata})">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthFramedata.NativeSize">
            <summary>Size in bytes of the underlying native structure.</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthFramedata.ethFrame">
            <summary>Get a slice for substruct ethFrame.</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthFramedata.ethFrame_etherType">
            <summary>Ethernet type in network byte order</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthFramedata.Clone">
            <summary>Returns a deep-copy of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthFramedata.Clear">
            <summary>Fill this object with zeroes.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthFramedata.CopyFrom(Vector.XlApi.XlEthFramedata)">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthFramedata.CopyFrom(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlEthFramedata})">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthFramedata.CopyTo(Vector.XlApi.XlEthFramedata)">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthFramedata.CopyTo(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlEthFramedata})">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthDataframeTx.#ctor">
            <summary>Zero-initializing constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthDataframeTx.#ctor(Vector.XlApi.XlEthDataframeTx)">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthDataframeTx.#ctor(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlEthDataframeTx})">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthDataframeTx.NativeSize">
            <summary>Size in bytes of the underlying native structure.</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthDataframeTx.frameIdentifier">
            <summary>FPGA internal identifier unique to every frame sent</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthDataframeTx.flags">
            <summary>Flags to specify (see XL_ETH_DATAFRAME_FLAGS_)</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthDataframeTx.dataLen">
             <summary>Overall data length of 
            &lt;frameData
            &gt;</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthDataframeTx.reserved">
            <summary>currently reserved field - must be set to "0"</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthDataframeTx.reserved2">
            <summary>reserved field - must be set to "0"</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthDataframeTx.destMAC">
            <summary>Destination MAC address</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthDataframeTx.sourceMAC">
            <summary>Source MAC address</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthDataframeTx.frameData">
            <summary>Get a slice for substruct frameData.</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthDataframeTx.frameData_ethFrame">
            <summary>Get a slice for substruct frameData_ethFrame.</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthDataframeTx.frameData_ethFrame_etherType">
            <summary>Ethernet type in network byte order</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthDataframeTx.Clone">
            <summary>Returns a deep-copy of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthDataframeTx.Clear">
            <summary>Fill this object with zeroes.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthDataframeTx.CopyFrom(Vector.XlApi.XlEthDataframeTx)">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthDataframeTx.CopyFrom(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlEthDataframeTx})">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthDataframeTx.CopyTo(Vector.XlApi.XlEthDataframeTx)">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthDataframeTx.CopyTo(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlEthDataframeTx})">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthChannelStatus.#ctor">
            <summary>Zero-initializing constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthChannelStatus.#ctor(Vector.XlApi.XlEthChannelStatus)">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthChannelStatus.#ctor(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlEthChannelStatus})">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthChannelStatus.NativeSize">
            <summary>Size in bytes of the underlying native structure.</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthChannelStatus.link">
            <summary>(XL_ETH_STATUS_LINK_*)      Ethernet connection status</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthChannelStatus.speed">
            <summary>(XL_ETH_STATUS_SPEED_*)     Link connection speed</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthChannelStatus.duplex">
            <summary>(XL_ETH_STATUS_DUPLEX_*)    Ethernet duplex mode. 1000Base-T always uses full duplex.</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthChannelStatus.mdiType">
            <summary>(XL_ETH_STATUS_MDI_*)       Currently active MDI-mode</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthChannelStatus.activeConnector">
            <summary>(XL_ETH_STATUS_CONNECTOR_*) Connector (plug) to use (BroadR-REACH or RJ-45).</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthChannelStatus.activePhy">
            <summary>(XL_ETH_STATUS_PHY_*)       Currently active physical layer</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthChannelStatus.clockMode">
            <summary>(XL_ETH_STATUS_CLOCK_*)     When in 1000Base-T or BroadR-mode, currently active mode</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthChannelStatus.brPairs">
            <summary>(XL_ETH_STATUS_BR_PAIR_*)   When in BroadR-mode, number of used cable pairs</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthChannelStatus.Clone">
            <summary>Returns a deep-copy of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthChannelStatus.Clear">
            <summary>Fill this object with zeroes.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthChannelStatus.CopyFrom(Vector.XlApi.XlEthChannelStatus)">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthChannelStatus.CopyFrom(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlEthChannelStatus})">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthChannelStatus.CopyTo(Vector.XlApi.XlEthChannelStatus)">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthChannelStatus.CopyTo(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlEthChannelStatus})">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="T:Vector.XlApi.XlNetEthDataframeRx">
            <summary>Structure for simulation and measurement rx and tx-ack events.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthDataframeRx.#ctor">
            <summary>Zero-initializing constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthDataframeRx.#ctor(Vector.XlApi.XlNetEthDataframeRx)">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthDataframeRx.#ctor(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlNetEthDataframeRx})">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthDataframeRx.NativeSize">
            <summary>Size in bytes of the underlying native structure.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthDataframeRx.frameDuration">
            <summary>Transmit duration of the Ethernet frame, in nanoseconds</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthDataframeRx.dataLen">
             <summary>Overall data length of 
            &lt;frameData
            &gt;</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthDataframeRx.reserved1">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthDataframeRx.reserved2">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthDataframeRx.errorFlags">
            <summary>see XL_ETH_NETWORK_RX_ERROR_xxx and XL_ETH_NETWORK_TX_ERROR_xxx</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthDataframeRx.reserved3">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthDataframeRx.fcs">
            <summary>Frame Check Sum</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthDataframeRx.destMAC">
            <summary>Destination MAC address</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthDataframeRx.sourceMAC">
            <summary>Source MAC address</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthDataframeRx.frameData">
            <summary>Get a slice for substruct frameData.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthDataframeRx.frameData_ethFrame">
            <summary>Get a slice for substruct frameData_ethFrame.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthDataframeRx.frameData_ethFrame_etherType">
            <summary>Ethernet type in network byte order</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthDataframeRx.Clone">
            <summary>Returns a deep-copy of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthDataframeRx.Clear">
            <summary>Fill this object with zeroes.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthDataframeRx.CopyFrom(Vector.XlApi.XlNetEthDataframeRx)">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthDataframeRx.CopyFrom(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlNetEthDataframeRx})">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthDataframeRx.CopyTo(Vector.XlApi.XlNetEthDataframeRx)">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthDataframeRx.CopyTo(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlNetEthDataframeRx})">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="T:Vector.XlApi.XlNetEthDataframeRxError">
            <summary>Structure for simulation and measurement rx-erro and tx-error events.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthDataframeRxError.#ctor">
            <summary>Zero-initializing constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthDataframeRxError.#ctor(Vector.XlApi.XlNetEthDataframeRxError)">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthDataframeRxError.#ctor(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlNetEthDataframeRxError})">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthDataframeRxError.NativeSize">
            <summary>Size in bytes of the underlying native structure.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthDataframeRxError.frameDuration">
            <summary>Transmit duration of the Ethernet frame, in nanoseconds</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthDataframeRxError.errorFlags">
            <summary>see XL_ETH_NETWORK_RX_ERROR_xxx and XL_ETH_NETWORK_TX_ERROR_xxx</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthDataframeRxError.dataLen">
             <summary>Overall data length of 
            &lt;frameData
            &gt;</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthDataframeRxError.reserved1">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthDataframeRxError.reserved2">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthDataframeRxError.reserved3">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthDataframeRxError.fcs">
            <summary>Frame Check Sum</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthDataframeRxError.destMAC">
            <summary>Destination MAC address</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthDataframeRxError.sourceMAC">
            <summary>Source MAC address</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthDataframeRxError.frameData">
            <summary>Get a slice for substruct frameData.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthDataframeRxError.frameData_ethFrame">
            <summary>Get a slice for substruct frameData_ethFrame.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthDataframeRxError.frameData_ethFrame_etherType">
            <summary>Ethernet type in network byte order</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthDataframeRxError.Clone">
            <summary>Returns a deep-copy of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthDataframeRxError.Clear">
            <summary>Fill this object with zeroes.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthDataframeRxError.CopyFrom(Vector.XlApi.XlNetEthDataframeRxError)">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthDataframeRxError.CopyFrom(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlNetEthDataframeRxError})">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthDataframeRxError.CopyTo(Vector.XlApi.XlNetEthDataframeRxError)">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthDataframeRxError.CopyTo(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlNetEthDataframeRxError})">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="T:Vector.XlApi.XlNetEthEvent">
            <summary>Ethernet Network-based mode events</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthEvent.#ctor">
            <summary>Zero-initializing constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthEvent.#ctor(Vector.XlApi.XlNetEthEvent)">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthEvent.#ctor(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlNetEthEvent})">
            <summary>Deep-Copy constructor.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.NativeSize">
            <summary>Size in bytes of the underlying native structure.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.size">
            <summary>4 - overall size of the complete event</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tag">
            <summary>2 - type of the event</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.channelIndex">
            <summary>2 - channel index</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.userHandle">
            <summary>4 - application specific user handle</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.flagsChip">
            <summary>2 - flags</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.reserved">
            <summary>2 - currently reserved field - not used</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.reserved1">
            <summary>8 - currently reserved field - not used</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.timeStampSync">
            <summary>8 - synchronized TS by the driver</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimRx">
            <summary>Get a slice for substruct tagData_frameSimRx.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimRx_frameDuration">
            <summary>Transmit duration of the Ethernet frame, in nanoseconds</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimRx_dataLen">
             <summary>Overall data length of 
            &lt;frameData
            &gt;</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimRx_reserved1">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimRx_reserved2">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimRx_errorFlags">
            <summary>see XL_ETH_NETWORK_RX_ERROR_xxx and XL_ETH_NETWORK_TX_ERROR_xxx</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimRx_reserved3">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimRx_fcs">
            <summary>Frame Check Sum</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimRx_destMAC">
            <summary>Destination MAC address</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimRx_sourceMAC">
            <summary>Source MAC address</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimRx_frameData">
            <summary>Get a slice for substruct tagData_frameSimRx_frameData.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimRx_frameData_ethFrame">
            <summary>Get a slice for substruct tagData_frameSimRx_frameData_ethFrame.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimRx_frameData_ethFrame_etherType">
            <summary>Ethernet type in network byte order</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimRxError">
            <summary>Get a slice for substruct tagData_frameSimRxError.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimRxError_frameDuration">
            <summary>Transmit duration of the Ethernet frame, in nanoseconds</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimRxError_errorFlags">
            <summary>see XL_ETH_NETWORK_RX_ERROR_xxx and XL_ETH_NETWORK_TX_ERROR_xxx</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimRxError_dataLen">
             <summary>Overall data length of 
            &lt;frameData
            &gt;</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimRxError_reserved1">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimRxError_reserved2">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimRxError_reserved3">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimRxError_fcs">
            <summary>Frame Check Sum</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimRxError_destMAC">
            <summary>Destination MAC address</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimRxError_sourceMAC">
            <summary>Source MAC address</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimRxError_frameData">
            <summary>Get a slice for substruct tagData_frameSimRxError_frameData.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimRxError_frameData_ethFrame">
            <summary>Get a slice for substruct tagData_frameSimRxError_frameData_ethFrame.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimRxError_frameData_ethFrame_etherType">
            <summary>Ethernet type in network byte order</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimTxAck">
            <summary>Get a slice for substruct tagData_frameSimTxAck.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimTxAck_frameDuration">
            <summary>Transmit duration of the Ethernet frame, in nanoseconds</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimTxAck_dataLen">
             <summary>Overall data length of 
            &lt;frameData
            &gt;</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimTxAck_reserved1">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimTxAck_reserved2">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimTxAck_errorFlags">
            <summary>see XL_ETH_NETWORK_RX_ERROR_xxx and XL_ETH_NETWORK_TX_ERROR_xxx</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimTxAck_reserved3">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimTxAck_fcs">
            <summary>Frame Check Sum</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimTxAck_destMAC">
            <summary>Destination MAC address</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimTxAck_sourceMAC">
            <summary>Source MAC address</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimTxAck_frameData">
            <summary>Get a slice for substruct tagData_frameSimTxAck_frameData.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimTxAck_frameData_ethFrame">
            <summary>Get a slice for substruct tagData_frameSimTxAck_frameData_ethFrame.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimTxAck_frameData_ethFrame_etherType">
            <summary>Ethernet type in network byte order</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimTxError">
            <summary>Get a slice for substruct tagData_frameSimTxError.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimTxError_frameDuration">
            <summary>Transmit duration of the Ethernet frame, in nanoseconds</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimTxError_errorFlags">
            <summary>see XL_ETH_NETWORK_RX_ERROR_xxx and XL_ETH_NETWORK_TX_ERROR_xxx</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimTxError_dataLen">
             <summary>Overall data length of 
            &lt;frameData
            &gt;</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimTxError_reserved1">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimTxError_reserved2">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimTxError_reserved3">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimTxError_fcs">
            <summary>Frame Check Sum</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimTxError_destMAC">
            <summary>Destination MAC address</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimTxError_sourceMAC">
            <summary>Source MAC address</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimTxError_frameData">
            <summary>Get a slice for substruct tagData_frameSimTxError_frameData.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimTxError_frameData_ethFrame">
            <summary>Get a slice for substruct tagData_frameSimTxError_frameData_ethFrame.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameSimTxError_frameData_ethFrame_etherType">
            <summary>Ethernet type in network byte order</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureRx">
            <summary>Get a slice for substruct tagData_frameMeasureRx.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureRx_frameDuration">
            <summary>Transmit duration of the Ethernet frame, in nanoseconds</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureRx_dataLen">
             <summary>Overall data length of 
            &lt;frameData
            &gt;</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureRx_reserved1">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureRx_reserved2">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureRx_errorFlags">
            <summary>see XL_ETH_NETWORK_RX_ERROR_xxx and XL_ETH_NETWORK_TX_ERROR_xxx</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureRx_reserved3">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureRx_fcs">
            <summary>Frame Check Sum</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureRx_destMAC">
            <summary>Destination MAC address</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureRx_sourceMAC">
            <summary>Source MAC address</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureRx_frameData">
            <summary>Get a slice for substruct tagData_frameMeasureRx_frameData.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureRx_frameData_ethFrame">
            <summary>Get a slice for substruct tagData_frameMeasureRx_frameData_ethFrame.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureRx_frameData_ethFrame_etherType">
            <summary>Ethernet type in network byte order</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureRxError">
            <summary>Get a slice for substruct tagData_frameMeasureRxError.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureRxError_frameDuration">
            <summary>Transmit duration of the Ethernet frame, in nanoseconds</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureRxError_errorFlags">
            <summary>see XL_ETH_NETWORK_RX_ERROR_xxx and XL_ETH_NETWORK_TX_ERROR_xxx</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureRxError_dataLen">
             <summary>Overall data length of 
            &lt;frameData
            &gt;</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureRxError_reserved1">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureRxError_reserved2">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureRxError_reserved3">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureRxError_fcs">
            <summary>Frame Check Sum</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureRxError_destMAC">
            <summary>Destination MAC address</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureRxError_sourceMAC">
            <summary>Source MAC address</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureRxError_frameData">
            <summary>Get a slice for substruct tagData_frameMeasureRxError_frameData.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureRxError_frameData_ethFrame">
            <summary>Get a slice for substruct tagData_frameMeasureRxError_frameData_ethFrame.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureRxError_frameData_ethFrame_etherType">
            <summary>Ethernet type in network byte order</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureTx">
            <summary>Get a slice for substruct tagData_frameMeasureTx.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureTx_frameDuration">
            <summary>Transmit duration of the Ethernet frame, in nanoseconds</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureTx_dataLen">
             <summary>Overall data length of 
            &lt;frameData
            &gt;</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureTx_reserved1">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureTx_reserved2">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureTx_errorFlags">
            <summary>see XL_ETH_NETWORK_RX_ERROR_xxx and XL_ETH_NETWORK_TX_ERROR_xxx</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureTx_reserved3">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureTx_fcs">
            <summary>Frame Check Sum</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureTx_destMAC">
            <summary>Destination MAC address</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureTx_sourceMAC">
            <summary>Source MAC address</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureTx_frameData">
            <summary>Get a slice for substruct tagData_frameMeasureTx_frameData.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureTx_frameData_ethFrame">
            <summary>Get a slice for substruct tagData_frameMeasureTx_frameData_ethFrame.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureTx_frameData_ethFrame_etherType">
            <summary>Ethernet type in network byte order</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureTxError">
            <summary>Get a slice for substruct tagData_frameMeasureTxError.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureTxError_frameDuration">
            <summary>Transmit duration of the Ethernet frame, in nanoseconds</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureTxError_errorFlags">
            <summary>see XL_ETH_NETWORK_RX_ERROR_xxx and XL_ETH_NETWORK_TX_ERROR_xxx</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureTxError_dataLen">
             <summary>Overall data length of 
            &lt;frameData
            &gt;</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureTxError_reserved1">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureTxError_reserved2">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureTxError_reserved3">
            <summary>currently reserved field - not used, ignore</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureTxError_fcs">
            <summary>Frame Check Sum</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureTxError_destMAC">
            <summary>Destination MAC address</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureTxError_sourceMAC">
            <summary>Source MAC address</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureTxError_frameData">
            <summary>Get a slice for substruct tagData_frameMeasureTxError_frameData.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureTxError_frameData_ethFrame">
            <summary>Get a slice for substruct tagData_frameMeasureTxError_frameData_ethFrame.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_frameMeasureTxError_frameData_ethFrame_etherType">
            <summary>Ethernet type in network byte order</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_channelStatus">
            <summary>Get a slice for substruct tagData_channelStatus.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_channelStatus_link">
            <summary>(XL_ETH_STATUS_LINK_*)      Ethernet connection status</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_channelStatus_speed">
            <summary>(XL_ETH_STATUS_SPEED_*)     Link connection speed</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_channelStatus_duplex">
            <summary>(XL_ETH_STATUS_DUPLEX_*)    Ethernet duplex mode. 1000Base-T always uses full duplex.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_channelStatus_mdiType">
            <summary>(XL_ETH_STATUS_MDI_*)       Currently active MDI-mode</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_channelStatus_activeConnector">
            <summary>(XL_ETH_STATUS_CONNECTOR_*) Connector (plug) to use (BroadR-REACH or RJ-45).</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_channelStatus_activePhy">
            <summary>(XL_ETH_STATUS_PHY_*)       Currently active physical layer</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_channelStatus_clockMode">
            <summary>(XL_ETH_STATUS_CLOCK_*)     When in 1000Base-T or BroadR-mode, currently active mode</summary>
        </member>
        <member name="P:Vector.XlApi.XlNetEthEvent.tagData_channelStatus_brPairs">
            <summary>(XL_ETH_STATUS_BR_PAIR_*)   When in BroadR-mode, number of used cable pairs</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthEvent.Clone">
            <summary>Returns a deep-copy of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthEvent.Clear">
            <summary>Fill this object with zeroes.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthEvent.CopyFrom(Vector.XlApi.XlNetEthEvent)">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthEvent.CopyFrom(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlNetEthEvent})">
            <summary>Overwrite this object with the content of source.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthEvent.CopyTo(Vector.XlApi.XlNetEthEvent)">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNetEthEvent.CopyTo(Vector.XlApi.XlSubstructSlice{Vector.XlApi.XlNetEthEvent})">
            <summary>Overwrite destination with the content of this object.</summary>
        </member>
        <member name="T:Vector.XlApi.XlArraySliceByte">
            <summary>View into an array within an XLAPI structure. Similar to ArraySegment and Span but with uniform functionality in .NET Framework and .NET Core.</summary>
        </member>
        <member name="P:Vector.XlApi.XlArraySliceByte.Item(System.Int32)">
            <summary>Get or set the element at the given array position.</summary>
        </member>
        <member name="P:Vector.XlApi.XlArraySliceByte.Count">
            <summary>Number of elements in this array.</summary>
        </member>
        <member name="P:Vector.XlApi.XlArraySliceByte.System#Collections#Generic#ICollection{System#Byte}#IsReadOnly">
            <summary>Always true, as adding or removing elements is not possible. Modification of existing elements is allowed, though.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.CopyFrom(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>Overwrite a range of values in this array with the contents from another array.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.CopyFrom(System.Byte[],System.Int32)">
            <summary>Overwrite this array with the contents of another array.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.ToArray(System.Int32,System.Int32)">
            <summary>Copy a range of elements from this array into a new array</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.ToArray">
            <summary>Return a copy of this array.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.System#Collections#Generic#IList{System#Byte}#Insert(System.Int32,System.Byte)">
            <summary>Not implemented.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.System#Collections#Generic#IList{System#Byte}#RemoveAt(System.Int32)">
            <summary>Not implemented.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.System#Collections#Generic#ICollection{System#Byte}#Remove(System.Byte)">
            <summary>Not implemented.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.System#Collections#Generic#ICollection{System#Byte}#Add(System.Byte)">
            <summary>Not implemented.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.Clear">
            <summary>Set all elements in the array to zero.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.Contains(System.Byte)">
            <summary>Determines whether the array contains the specific value.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.CopyTo(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Copy a range of values from this array to another array.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.CopyTo(System.Byte[],System.Int32)">
            <summary>Copy all values from this array to another array.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.GetEnumerator">
            <summary>Get an enumerator that iterates over every element in this array.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.System#Collections#IEnumerable#GetEnumerator">
            <summary>Get an enumerator that iterates over every element in this array.</summary>
        </member>
        <member name="T:Vector.XlApi.XlArraySliceByte.Enumerator">
            <summary>Enumerator that iterates over every element in the array.</summary>
        </member>
        <member name="P:Vector.XlApi.XlArraySliceByte.Enumerator.Current">
            <summary>Get the current element in the array.</summary>
        </member>
        <member name="P:Vector.XlApi.XlArraySliceByte.Enumerator.System#Collections#IEnumerator#Current">
            <summary>Get the current element in the array.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.Enumerator.Reset">
            <summary>Sets the enumerator to its initial position, which is before the first element in the array.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.Enumerator.MoveNext">
            <summary>Advances the enumerator to the next element of the array.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.Enumerator.Dispose">
            <summary>No operation.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.IndexOf(System.Byte,System.Int32,System.Int32)">
            <summary>Get index of first byte that matches the given item.</summary>
            <param name="item">Byte value to search.</param>
            <param name="startIndex">Offset to start the search at.</param>
            <param name="count">Number of bytes to search.</param>
            <returns>Index of first occurence of <paramref name="item"/> or -1 if not found.</returns>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.IndexOf(System.Byte)">
            <summary>Get index of first byte that matches the given item.</summary>
            <param name="item">Byte value to search.</param>
            <returns>Index of first occurence of <paramref name="item"/> or -1 if not found.</returns>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.AsArraySegment">
            <summary>Convert this XlArraySliceByte into an ArraySegment that points to the same memory region.
            <para>Starting with .NET Core 2.1, the ArraySegment can be converted to a Span and therefore the
            underlying buffer may directly be manipulated using all functions that take a Span.</para>
            </summary>
            <returns>New ArraySegment that points to the same memory region.</returns>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.WriteUInt16(System.Int32,System.UInt16)">
            <summary>Write 16-bit little-endian value at given byte offset.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.WriteUInt32(System.Int32,System.UInt32)">
            <summary>Write 32-bit little-endian value at given byte offset.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.WriteUInt64(System.Int32,System.UInt64)">
            <summary>Write 64-bit little-endian value at given byte offset.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.ReadUInt16(System.Int32)">
            <summary>Read 16-bit little-endian value at given byte offset.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.ReadUInt32(System.Int32)">
            <summary>Read 32-bit little-endian value at given byte offset.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.ReadUInt64(System.Int32)">
            <summary>Read 64-bit little-endian value at given byte offset.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.WriteUInt16Be(System.Int32,System.UInt16)">
            <summary>Write 16-bit big-endian value at given byte offset.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.WriteUInt32Be(System.Int32,System.UInt32)">
            <summary>Write 32-bit big-endian value at given byte offset.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.WriteUInt64Be(System.Int32,System.UInt64)">
            <summary>Write 64-bit big-endian value at given byte offset.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.ReadUInt16Be(System.Int32)">
            <summary>Read 16-bit big-endian value at given byte offset.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.ReadUInt32Be(System.Int32)">
            <summary>Read 32-bit big-endian value at given byte offset.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceByte.ReadUInt64Be(System.Int32)">
            <summary>Read 64-bit big-endian value at given byte offset.</summary>
        </member>
        <member name="T:Vector.XlApi.XlArraySliceUInt32">
            <summary>View into an array within an XLAPI structure. Similar to ArraySegment and Span but with uniform functionality in .NET Framework and .NET Core.</summary>
        </member>
        <member name="P:Vector.XlApi.XlArraySliceUInt32.Item(System.Int32)">
            <summary>Get or set the element at the given array position.</summary>
        </member>
        <member name="P:Vector.XlApi.XlArraySliceUInt32.Count">
            <summary>Number of elements in this array.</summary>
        </member>
        <member name="P:Vector.XlApi.XlArraySliceUInt32.System#Collections#Generic#ICollection{System#UInt32}#IsReadOnly">
            <summary>Always true, as adding or removing elements is not possible. Modification of existing elements is allowed, though.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceUInt32.CopyFrom(System.UInt32[],System.Int32,System.Int32,System.Int32)">
            <summary>Overwrite a range of values in this array with the contents from another array.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceUInt32.CopyFrom(System.UInt32[],System.Int32)">
            <summary>Overwrite this array with the contents of another array.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceUInt32.ToArray(System.Int32,System.Int32)">
            <summary>Copy a range of elements from this array into a new array</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceUInt32.ToArray">
            <summary>Return a copy of this array.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceUInt32.IndexOf(System.UInt32)">
            <summary>Get index of the first element that matches the given item.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceUInt32.System#Collections#Generic#IList{System#UInt32}#Insert(System.Int32,System.UInt32)">
            <summary>Not implemented.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceUInt32.System#Collections#Generic#IList{System#UInt32}#RemoveAt(System.Int32)">
            <summary>Not implemented.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceUInt32.System#Collections#Generic#ICollection{System#UInt32}#Remove(System.UInt32)">
            <summary>Not implemented.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceUInt32.System#Collections#Generic#ICollection{System#UInt32}#Add(System.UInt32)">
            <summary>Not implemented.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceUInt32.Clear">
            <summary>Set all elements in the array to zero.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceUInt32.Contains(System.UInt32)">
            <summary>Determines whether the array contains the specific value.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceUInt32.CopyTo(System.Int32,System.UInt32[],System.Int32,System.Int32)">
            <summary>Copy a range of values from this array to another array.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceUInt32.CopyTo(System.UInt32[],System.Int32)">
            <summary>Copy all values from this array to another array.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceUInt32.GetEnumerator">
            <summary>Get an enumerator that iterates over every element in this array.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceUInt32.System#Collections#IEnumerable#GetEnumerator">
            <summary>Get an enumerator that iterates over every element in this array.</summary>
        </member>
        <member name="T:Vector.XlApi.XlArraySliceUInt32.Enumerator">
            <summary>Enumerator that iterates over every element in the array.</summary>
        </member>
        <member name="P:Vector.XlApi.XlArraySliceUInt32.Enumerator.Current">
            <summary>Get the current element in the array.</summary>
        </member>
        <member name="P:Vector.XlApi.XlArraySliceUInt32.Enumerator.System#Collections#IEnumerator#Current">
            <summary>Get the current element in the array.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceUInt32.Enumerator.Reset">
            <summary>Sets the enumerator to its initial position, which is before the first element in the array.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceUInt32.Enumerator.MoveNext">
            <summary>Advances the enumerator to the next element of the array.</summary>
        </member>
        <member name="M:Vector.XlApi.XlArraySliceUInt32.Enumerator.Dispose">
            <summary>No operation.</summary>
        </member>
        <member name="T:Vector.XlApi.IXlStruct">
            <summary>Type independent, common functionality of the Vector.XlAPI's wrapper classes for native XL-structs.</summary>
        </member>
        <member name="M:Vector.XlApi.IXlStruct.Clear">
            <summary>Fill this structure with zeroes.</summary>
        </member>
        <member name="T:Vector.XlApi.IXlStruct`1">
            <summary>Type specific, common functionality of the Vector.XlAPI's wrapper classes for native XL-structs.</summary>
        </member>
        <member name="M:Vector.XlApi.IXlStruct`1.CopyFrom(`0)">
            <summary>Overwrite this object with the content of <paramref name="source"/>.</summary>
            <param name="source">Object to copy from.</param>
        </member>
        <member name="M:Vector.XlApi.IXlStruct`1.CopyFrom(Vector.XlApi.XlSubstructSlice{`0})">
            <summary>Overwrite this object with the content of <paramref name="source"/>.</summary>
            <param name="source">Object to copy from.</param>
        </member>
        <member name="M:Vector.XlApi.IXlStruct`1.CopyTo(`0)">
            <summary>Overwrite <paramref name="destination"/> with the content of this object.</summary>
            <param name="destination">Object to copy to.</param>
        </member>
        <member name="M:Vector.XlApi.IXlStruct`1.CopyTo(Vector.XlApi.XlSubstructSlice{`0})">
            <summary>Overwrite <paramref name="destination"/> with the content of this object.</summary>
            <param name="destination">Object to copy to.</param>
        </member>
        <member name="T:Vector.XlApi.XlConnectionInfo">
            <summary>Bit-Interpretation of the <see cref="P:Vector.XlApi.XlIdeviceDrvConfig.connectionInfo"/> field.</summary>
        </member>
        <member name="P:Vector.XlApi.XlConnectionInfo.Raw">
            <summary>Uninterpreted integer value.</summary>
        </member>
        <member name="P:Vector.XlApi.XlConnectionInfo.Family">
            <summary>Class of host connection. Defines how the other values shall be interpreted.</summary>
        </member>
        <member name="P:Vector.XlApi.XlConnectionInfo.RawDetail">
            <summary>The lower 24 bit. Interpretation depends on the family.</summary>
        </member>
        <member name="P:Vector.XlApi.XlConnectionInfo.UsbSpeed">
            <summary>Usb Speed of the connection (applies to Family==Usb).</summary>
        </member>
        <member name="M:Vector.XlApi.XlConnectionInfo.#ctor(System.UInt32)">
            <summary>Construct from uninterpreted value.</summary>
        </member>
        <member name="M:Vector.XlApi.XlConnectionInfo.#ctor(Vector.XlApi.XlConnectionInfo)">
            <summary>Copy constructor.</summary>
        </member>
        <member name="T:Vector.XlApi.XlEthMacAddress">
            <summary>Holds a 6-byte ethernet MAC address starting the the most significant byte.</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthMacAddress.NativeSize">
            <summary>Size in bytes of the underlying native structure.</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthMacAddress.Boradcast">
            <summary>Returns a new <c>XlEthMacAddress ff:ff:ff:ff:ff:ff.</c> </summary>
        </member>
        <member name="M:Vector.XlApi.XlEthMacAddress.#ctor(System.Byte[])">
            <summary>Construct from a 6 byte array in transmission order.</summary>
            <param name="macAdressBytes">6 byte array in transmission order.</param>
        </member>
        <member name="M:Vector.XlApi.XlEthMacAddress.#ctor">
            <summary>Zero-initializing constructor. </summary>
        </member>
        <member name="M:Vector.XlApi.XlEthMacAddress.#ctor(Vector.XlApi.XlEthMacAddress)">
            <summary>Copy constructor.</summary>
            <param name="v">Object to copy.</param>
        </member>
        <member name="M:Vector.XlApi.XlEthMacAddress.#ctor(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>Construct from 6 individual bytes in transmission order.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthMacAddress.#ctor(System.Net.NetworkInformation.PhysicalAddress)">
            <summary>Construct from a <see cref="T:System.Net.NetworkInformation.PhysicalAddress"/> object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthMacAddress.GetAddressBytes">
            <summary>Returns a copy of the bytes held by this object.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthMacAddress.ToPhysicalAddress">
            <summary>Convert into a <see cref="T:System.Net.NetworkInformation.PhysicalAddress"/> object </summary>
            <returns>A new <c>PhysicalAddress</c> that represents the same MAC address.</returns>
        </member>
        <member name="M:Vector.XlApi.XlEthMacAddress.CopyFrom(Vector.XlApi.XlEthMacAddress)">
            <summary>Overwrite the address heldd by this object with the given address.</summary>
            <param name="macAddressToCopy">MAC address to assign from.</param>
        </member>
        <member name="T:Vector.XlApi.XlEthNetworkRxTxErrorFlags">
            <summary>Provides both the Rx and Tx interpretation of <see cref="P:Vector.XlApi.XlNetEthDataframeRx.errorFlags"/>.</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthNetworkRxTxErrorFlags.Raw">
            <summary>Numeric value of errorFlags. </summary>
        </member>
        <member name="M:Vector.XlApi.XlEthNetworkRxTxErrorFlags.#ctor(System.UInt32)">
            <summary>Construct from numeric value.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthNetworkRxTxErrorFlags.#ctor(Vector.XlApi.XlEthNetworkRxTxErrorFlags)">
            <summary>Copy constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthNetworkRxTxErrorFlags.#ctor(Vector.XlApi.XlEthNetworkRxError)">
            <summary>Construct from Rx interpretation.</summary>
        </member>
        <member name="M:Vector.XlApi.XlEthNetworkRxTxErrorFlags.#ctor(Vector.XlApi.XlEthNetworkTxError)">
            <summary>Construct from Tx interpretation.</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthNetworkRxTxErrorFlags.Rx">
            <summary>Interpretation for <see cref="F:Vector.XlApi.XlEthEventTag.FramerxSimulation"/>, <see cref="F:Vector.XlApi.XlEthEventTag.FramerxMeasurement"/>, ...</summary>
        </member>
        <member name="P:Vector.XlApi.XlEthNetworkRxTxErrorFlags.Tx">
            <summary>Interpretation for <see cref="F:Vector.XlApi.XlEthEventTag.FrametxAckSimulation"/>, <see cref="F:Vector.XlApi.XlEthEventTag.FrametxMeasurement"/>, ...</summary>
        </member>
        <member name="T:Vector.XlApi.XlException">
            <summary>All XlApi-Wrapper functions that do not start with "Try" throw this excecption when the
            native function returns a value other that <see cref="F:Vector.XlApi.XlStatus.Success"></see></summary>
        </member>
        <member name="M:Vector.XlApi.XlException.#ctor(System.String,Vector.XlApi.XlStatus)">
            <summary>Construct an XlException from the native function name and the status code.</summary>
            <param name="nativeFuncName">Name of the native function that returned the <paramref name="status"/>.</param>
            <param name="status">Value returned by the native function.</param>
        </member>
        <member name="P:Vector.XlApi.XlException.Status">
            <summary>Value returned by the native function.</summary>
        </member>
        <member name="P:Vector.XlApi.XlException.FunctionName">
            <summary>Name of the native function that returned the status.</summary>
        </member>
        <member name="T:Vector.XlApi.XlNativeNameAttribute">
            <summary>Attribute that holds the name of the C-header counterpart of a entity of this wrapper.</summary>
        </member>
        <member name="P:Vector.XlApi.XlNativeNameAttribute.Name">
            <summary>Name of the C-header counterpart of the entity this attribute applies to.</summary>
        </member>
        <member name="M:Vector.XlApi.XlNativeNameAttribute.#ctor(System.String)">
            <summary>Construct from a given name.</summary>
        </member>
        <member name="T:Vector.XlApi.XlSubstructSlice`1">
            <summary>Represents a substruct of a larger struct to simplify copying from and into this substruct.</summary>
            <typeparam name="T">Type of the substruct.</typeparam>
        </member>
        <member name="M:Vector.XlApi.XlSubstructSlice`1.CopyFrom(`0)">
            <summary>Overwrite this substruct with the content from <paramref name="source"/>.</summary>
            <param name="source">Object to copy from.</param>
        </member>
        <member name="M:Vector.XlApi.XlSubstructSlice`1.CopyTo(`0)">
            <summary>Overwrite <paramref name="destination"/> with the content of this substruct.</summary>
            <param name="destination">Object to copy to.</param>
        </member>
        <member name="M:Vector.XlApi.XlSubstructSlice`1.Clear">
            <summary>Fill this substruct with zeroes.</summary>
        </member>
        <member name="T:Vector.XlApi.XlVersion32">
            <summary>Bit-Interpretation of 32 bit Version fields in XLAPI structures.</summary>
        </member>
        <member name="P:Vector.XlApi.XlVersion32.Raw">
            <summary>Uninterpreted integer value.</summary>
        </member>
        <member name="P:Vector.XlApi.XlVersion32.Major">
            <summary>Major version component (8 bit).</summary>
        </member>
        <member name="P:Vector.XlApi.XlVersion32.Minor">
            <summary>Minor version component (8 bit).</summary>
        </member>
        <member name="P:Vector.XlApi.XlVersion32.Build">
            <summary>Third version component (16 bit). This is sometimes called "revision".</summary>
        </member>
        <member name="M:Vector.XlApi.XlVersion32.#ctor(System.UInt32)">
            <summary>Construct from uninterpreted integer value.</summary>
            <param name="raw"></param>
        </member>
        <member name="M:Vector.XlApi.XlVersion32.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>Construct from major, minor and build number. </summary>
        </member>
        <member name="M:Vector.XlApi.XlVersion32.#ctor(System.Version)">
            <summary>Construct from the major, minor and build component of a <see cref="T:System.Version"/>-</summary>
        </member>
        <member name="M:Vector.XlApi.XlVersion32.#ctor(Vector.XlApi.XlVersion32)">
            <summary>Copy constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlVersion32.ToVersion">
            <summary>Convert to <see cref="T:System.Version"/>.</summary>
            <returns>A <see cref="T:System.Version"/> with the major, minor and build value of this XlVersion32.</returns>
        </member>
        <member name="T:Vector.XlApi.XlVersion64">
            <summary>Bit-Interpretation of 64 bit Version fields in XLAPI structures.</summary>
        </member>
        <member name="P:Vector.XlApi.XlVersion64.Raw">
            <summary>Uninterpreted integer value.</summary>
        </member>
        <member name="P:Vector.XlApi.XlVersion64.Major">
            <summary>Major version component (8 bit).</summary>
        </member>
        <member name="P:Vector.XlApi.XlVersion64.Minor">
            <summary>Minor version component (8 bit).</summary>
        </member>
        <member name="P:Vector.XlApi.XlVersion64.Build">
            <summary>Third version component (16 bit). This is sometimes called "revision".</summary>
        </member>
        <member name="M:Vector.XlApi.XlVersion64.#ctor(System.UInt64)">
            <summary>Construct from uninterpreted integer value.</summary>
        </member>
        <member name="M:Vector.XlApi.XlVersion64.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>Construct from major, minor and build number.</summary>
        </member>
        <member name="M:Vector.XlApi.XlVersion64.#ctor(System.Version)">
            <summary>Construct from the major, minor and build component of a <see cref="T:System.Version"/>.</summary>
        </member>
        <member name="M:Vector.XlApi.XlVersion64.#ctor(Vector.XlApi.XlVersion64)">
            <summary>Copy constructor.</summary>
        </member>
        <member name="M:Vector.XlApi.XlVersion64.ToVersion">
            <summary>Convert to <see cref="T:System.Version"/>.</summary>
            <returns>A <see cref="T:System.Version"/> with the major, minor and build value of this XlVersion64.</returns>
        </member>
        <member name="T:Vector.XlApi.XlApplConfig">
            <summary>Set of values that define an application channel assignment.</summary>
        </member>
        <member name="P:Vector.XlApi.XlApplConfig.appName">
            <summary>Name of the application. Must not contain dots.</summary>
        </member>
        <member name="P:Vector.XlApi.XlApplConfig.appChannel">
            <summary>Channel of the application. Must be less than <see cref="F:Vector.XlApi.Xl.ApplconfigMaxChannels"/>.</summary>
        </member>
        <member name="P:Vector.XlApi.XlApplConfig.hwType">
            <summary>Hardware type of the device that the application is assigned to
            <para>If the application channel assignment exists in registry, but has been cleared, this value is set to <see cref="F:Vector.XlApi.XlHwType.None"/>.</para>
            </summary>
        </member>
        <member name="P:Vector.XlApi.XlApplConfig.hwIndex">
            <summary>Index to differentiate between multiple connected devices of the same hwType.</summary>
        </member>
        <member name="P:Vector.XlApi.XlApplConfig.hwChannel">
            <summary>Index of this channel relative to its device.</summary>
        </member>
        <member name="P:Vector.XlApi.XlApplConfig.busType">
            <summary>Bustype of this assignment.</summary>
        </member>
        <member name="T:Vector.XlApi.XlIdeviceDrvConfig">
            <summary>This structure contains information on a local or remote connected device.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIdeviceDrvConfig.name">
            <summary>Name of the device, for example "VN1630A".</summary>
        </member>
        <member name="P:Vector.XlApi.XlIdeviceDrvConfig.hwType">
            <summary>The <c>XL_HWTYPE_*</c> value for this device.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIdeviceDrvConfig.hwIndex">
            <summary>Index to differentiate between multiple connected devices of the same hwType.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIdeviceDrvConfig.serialNumber">
            <summary>Serial number of this device.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIdeviceDrvConfig.articleNumber">
            <summary>Article number of this device. Cast to uint to get the numeric value.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIdeviceDrvConfig.driverVersion">
            <summary>Version of the device driver.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIdeviceDrvConfig.connectionInfo">
            <summary>Specifies the host connection of the device.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIdeviceDrvConfig.isRemoteDevice">
            <summary>True if this is a remote device, false it this is a local device.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIdeviceDrvConfig.remoteDeviceList">
            <summary>List of remote devices connected to this device.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIdeviceDrvConfig.channelList">
            <summary>List of channels on this device.</summary>
        </member>
        <member name="T:Vector.XlApi.XlIchannelDrvConfig">
            <summary>This structure contains information on a channel of a local or remote connected device.</summary>
            <remarks>All channels, that are directly connected to the host, are local channels. The sub
            devices of a remote host, for example a VN8900 device, have remote channels and
            local channel counterparts. A remote channel is a channel from the perspective of the
            remote host. Its local channel counterpart is the same channel but from perspective of the host PC.</remarks>
        </member>
        <member name="P:Vector.XlApi.XlIchannelDrvConfig.hwChannel">
            <summary>Index of this channel relative to its device.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIchannelDrvConfig.channelIndex">
            <summary>Index of the local channel in the channel list returned by <see cref="M:Vector.XlApi.XlIdriverConfig.GetChannelConfig"/>.</summary>
            <remarks>This index uniquely identifies a local channel in the current application. Remote  channels have
            the same channelIndex than their local counterpart. The channel Mask can be computed as
            <c>(XLaccess)1 &lt;&lt; channelIndex</c>.</remarks>
        </member>
        <member name="P:Vector.XlApi.XlIchannelDrvConfig.deviceIndex">
            <summary>Index of the channel’s device in the device list returned by <see cref="M:Vector.XlApi.XlIdriverConfig.GetDeviceConfig"/>.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIchannelDrvConfig.interfaceVersion">
            <summary>Interface version supported by this channel, currently either <see cref="F:Vector.XlApi.XlInterfaceVersion.V3"/> or <see cref="F:Vector.XlApi.XlInterfaceVersion.V4"/>.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIchannelDrvConfig.isOnBus">
            <summary>True while at least one application activated this channel (“is on bus”) and false otherwise.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIchannelDrvConfig.channelCapabilities">
            <summary>Capabilities of this channel.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIchannelDrvConfig.channelCapabilities2">
            <summary>For future use.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIchannelDrvConfig.channelBusCapabilities">
            <summary>Set of bus types that the hardware can support on this channel if equipped with an appropriate transceiver.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIchannelDrvConfig.channelBusActiveCapabilities">
            <summary> Set of bus types that the hardware can support on this channel using the currently equipped transceiver.
            <para>Applications that search for channels on which they can open a port of a specific bus type should check channelBusActiveCapabilities.</para>
            </summary>
        </member>
        <member name="P:Vector.XlApi.XlIchannelDrvConfig.connectedBusType">
            <summary>While an application in the system has opened and activated a port on this channel, connectedBusType is the <see cref="T:Vector.XlApi.XlBusType"/> value for the
            bustype of the open port. Otherwise this is <see cref="F:Vector.XlApi.XlBusType.None"/>.
            </summary>
        </member>
        <member name="P:Vector.XlApi.XlIchannelDrvConfig.currentlyAvailableTimestamps">
            <summary>Reserved.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIchannelDrvConfig.busParams">
            <summary>Bustype-specific information about this channel.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIchannelDrvConfig.transceiver">
            <summary>Information on the transceiver that this channel is equipped with.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIchannelDrvConfig.remoteChannel">
            <summary>Pointer to the remote channel counterpart of this channel or <c>null</c> if there is no remote channel counterpart.</summary>
        </member>
        <member name="T:Vector.XlApi.XlIchannelDrvConfigTransceiver">
            <summary>Information on a transceiver on a channel. </summary>
        </member>
        <member name="P:Vector.XlApi.XlIchannelDrvConfigTransceiver.name">
            <summary>Name of the transceiver, for example “On board CAN 1051cap (Highspeed)”</summary>
        </member>
        <member name="P:Vector.XlApi.XlIchannelDrvConfigTransceiver.type">
            <summary>The <see cref="T:Vector.XlApi.XlTransceiverType" /> value for the transceiver on this channel.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIchannelDrvConfigTransceiver.configError">
            <summary>Non-zero values indicate problems with the transceiver, for example an unsupported combination of piggies or a
            transceiver that is not supported on this channel at all.</summary>
        </member>
        <member name="T:Vector.XlApi.XlIvirtualPortDrvConfig">
            <summary>Information on a virtual port that is connected to a switch.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIvirtualPortDrvConfig.virtualPortName">
            <summary>Name of the virtual port.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIvirtualPortDrvConfig.networkIdx">
            <summary>Index of the network in the list returned by <see cref="M:Vector.XlApi.XlIdriverConfig.GetNetworkConfig"/></summary>
        </member>
        <member name="P:Vector.XlApi.XlIvirtualPortDrvConfig.switchId">
            <summary>ID of the switch that this virtual port is connected to.</summary>
        </member>
        <member name="T:Vector.XlApi.XlImeasurementPointDrvConfig">
            <summary>Information on a measurement point that is connected to a switch.</summary>
        </member>
        <member name="P:Vector.XlApi.XlImeasurementPointDrvConfig.measurementPointName">
            <summary>Name of the measurement point.</summary>
        </member>
        <member name="P:Vector.XlApi.XlImeasurementPointDrvConfig.networkIdx">
            <summary>Index of the network in the list returned by <see cref="M:Vector.XlApi.XlIdriverConfig.GetNetworkConfig"/></summary>
        </member>
        <member name="P:Vector.XlApi.XlImeasurementPointDrvConfig.switchId">
            <summary>ID of the switch that this measurement point is connected to.</summary>
        </member>
        <member name="P:Vector.XlApi.XlImeasurementPointDrvConfig.channel">
            <summary>Pointer to the channel associated with the measurement point or <c>null</c> if no such channel exists.</summary>
        </member>
        <member name="T:Vector.XlApi.XlIswitchDrvConfig">
            <summary>This structure contains information on a switch that is part of a network.
            <para>Note that the term &quot;switch&quot; in the driver configuration refers to any kind of segment.</para>
            </summary>
        </member>
        <member name="P:Vector.XlApi.XlIswitchDrvConfig.switchName">
            <summary>Name of the switch.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIswitchDrvConfig.switchId">
            <summary>ID of the switch in the network. Switches in different networks may have the same switch ID.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIswitchDrvConfig.networkIdx">
            <summary>Index of the network in the list returned by <see cref="M:Vector.XlApi.XlIdriverConfig.GetNetworkConfig"/></summary>
        </member>
        <member name="P:Vector.XlApi.XlIswitchDrvConfig.device">
            <summary>Pointer to the device that this switch resides on.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIswitchDrvConfig.switchCapability">
            <summary>Defines what kind of segment this &quot;switch&quot; is.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIswitchDrvConfig.vpList">
            <summary>List of virtual ports that are connected to this switch.
            <para>This list includes both statically configured and dynamically added virtual ports.</para>
            </summary>
        </member>
        <member name="P:Vector.XlApi.XlIswitchDrvConfig.mpList">
            <summary>List of measurement points that are connected to this switch.</summary>
        </member>
        <member name="T:Vector.XlApi.XlInetworkDrvConfig">
            <summary>This structure contains information on a network that is configured on at least one connected device.</summary>
        </member>
        <member name="P:Vector.XlApi.XlInetworkDrvConfig.networkName">
            <summary>Name of the network.</summary>
        </member>
        <member name="P:Vector.XlApi.XlInetworkDrvConfig.statusCode">
            <summary>A code that describes a configuration error.</summary>
        </member>
        <member name="P:Vector.XlApi.XlInetworkDrvConfig.statusErrorString">
            <summary>An English error message that explains the statusCode.
            <para>In case of a name-duplication, the message contains the duplicate name.
            If no error message is available, the string is <c>null</c>.</para>
            </summary>
        </member>
        <member name="P:Vector.XlApi.XlInetworkDrvConfig.networkType">
            <summary>Currently always <see cref="F:Vector.XlApi.XlNetworkType.Eth"/>.</summary>
        </member>
        <member name="P:Vector.XlApi.XlInetworkDrvConfig.switchList">
            <summary>List of switches that are part of this network.</summary>
        </member>
        <member name="T:Vector.XlApi.XlIdllDrvConfig">
            <summary>This structure contains information on the native DLL instance loaded by this wrapper. </summary>
        </member>
        <member name="P:Vector.XlApi.XlIdllDrvConfig.dllVersion">
            <summary>Version of the native DLL.</summary>
        </member>
        <member name="T:Vector.XlApi.XlIdriverConfig">
            <summary>Encapsulates the native representation of the CreateDriverConfig-structure and provides a managed representation of its data.
            <para>The application should <see cref="M:Vector.XlApi.XlIdriverConfig.Dispose"/> this object to free the native memory after it has extracted all relevant
            data using the Getter-Methods (e.g. <see cref="M:Vector.XlApi.XlIdriverConfig.GetDeviceConfig"/>, <see cref="M:Vector.XlApi.XlIdriverConfig.GetNetworkConfig"/>). The Getter-Methods translate
            the native objects into a managed representation and preserve reference identity. This means that if two pointers in the native
            representation point to the same object, the two corresponding pointers in the managed representation also point to the same object,
            as determined by <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>.</para>
            </summary>
            <seealso cref="M:Vector.XlApi.Xl.CreateDriverConfig"/>
        </member>
        <member name="F:Vector.XlApi.XlIdriverConfig.Version">
            <summary>The version of CreateDriverConfig used by this version of the Vector.XlApi wrapper.</summary>
        </member>
        <member name="P:Vector.XlApi.XlIdriverConfig.configHandle">
            <summary>Handle of the native representation of this instance of the driver config.
            <para>The wrapper does not expose any method that expects this handle.</para>
            </summary>
            <exception cref="T:System.ObjectDisposedException">Already disposed.</exception>
        </member>
        <member name="M:Vector.XlApi.XlIdriverConfig.GetDeviceConfig">
            <summary>Get the list of devices in this driver config instance.</summary>
            <returns>Managed representation of the list of devices.</returns>
            <exception cref="T:Vector.XlApi.XlException">General error.</exception>
            <exception cref="T:System.ObjectDisposedException">Already disposed.</exception>
        </member>
        <member name="M:Vector.XlApi.XlIdriverConfig.GetChannelConfig">
            <summary>Get the list of channels in this driver config instance.</summary>
            <returns>Managed representation of the list of channels.</returns>
            <exception cref="T:Vector.XlApi.XlException">General error.</exception>
            <exception cref="T:System.ObjectDisposedException">Already disposed.</exception>
        </member>
        <member name="M:Vector.XlApi.XlIdriverConfig.GetNetworkConfig">
            <summary>Get the list of networks in this driver config instance.</summary>
            <returns>Managed representation of the list of networks.</returns>
            <exception cref="T:Vector.XlApi.XlException">General error.</exception>
            <exception cref="T:System.ObjectDisposedException">Already disposed.</exception>
        </member>
        <member name="M:Vector.XlApi.XlIdriverConfig.GetSwitchConfig">
            <summary>Get the list of switches in this driver config instance.</summary>
            <returns>Managed representation of the list of switches.</returns>
            <exception cref="T:Vector.XlApi.XlException">General error.</exception>
            <exception cref="T:System.ObjectDisposedException">Already disposed.</exception>
        </member>
        <member name="M:Vector.XlApi.XlIdriverConfig.GetMeasurementPointConfig">
            <summary>Get the list of measurement points in this driver config instance.</summary>
            <returns>Managed representation of the list of measurement points.</returns>
            <exception cref="T:Vector.XlApi.XlException">General error.</exception>
            <exception cref="T:System.ObjectDisposedException">Already disposed.</exception>
        </member>
        <member name="M:Vector.XlApi.XlIdriverConfig.GetVirtualPortConfig">
            <summary>Get the list of virtual ports in this driver config instance.</summary>
            <returns>Managed representation of the list of virtual ports.</returns>
            <exception cref="T:Vector.XlApi.XlException">General error.</exception>
            <exception cref="T:System.ObjectDisposedException">Already disposed.</exception>
        </member>
        <member name="M:Vector.XlApi.XlIdriverConfig.GetDllConfig">
            <summary>Get the dll version information in this driver config instance.</summary>
            <returns>Managed representation of the dll version information.</returns>
            <exception cref="T:Vector.XlApi.XlException">General error.</exception>
            <exception cref="T:System.ObjectDisposedException">Already disposed.</exception>
        </member>
        <member name="M:Vector.XlApi.XlIdriverConfig.Dispose">
            <summary>Release the native part of the driver config with xlDestroyDriverConfig(). 
            <para>Afterwards, no methods on this object may be called anymore, but any managed object returned by the methods of this
            object remains valid.</para>
            </summary>
        </member>
    </members>
</doc>
